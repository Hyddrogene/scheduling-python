Nous considérons un nouveau problème de planification émanant d'une application réelle dans une université privée de Buenos Aires, en Argentine. Dans cet article, nous décrivons en détail le problème, qui généralise le problème de la planification des cours après inscription (PECTP), proposons un modèle de programmation linéaire en nombres entiers (ILP) et une approche heuristique basée sur cette formulation. Cet algorithme a été implémenté et testé sur des instances obtenues à partir de données réelles, montrant que l'approche est réalisable en pratique et produit des solutions de bonne qualité.

### 1. Introduction et revue de la littérature
Les problèmes de planification dans le contexte universitaire représentent une tâche très difficile, où de nombreuses restrictions et demandes doivent être satisfaites par une solution réalisable. Au cours de la dernière décennie, ce type de problème a reçu beaucoup d'attention, en partie en raison de l'organisation de trois compétitions différentes : la première compétition internationale de planification (ITC) en 2002, la deuxième ITC en 2007 et la troisième ITC en 2011. En conséquence, une grande variété de méthodes et d'algorithmes pour différentes approches du problème ont été proposées.

L'ITC 2007 présentait trois pistes avec différents problèmes de planification universitaire : la planification des examens (ETP), où l'objectif est de programmer des examens sur une période tout en respectant un ensemble de contraintes ; la planification des cours basée sur les inscriptions (PECTP), où l'objectif est de planifier un ensemble d'événements dans des salles et des créneaux horaires en fonction des choix des étudiants ; et la planification des cours basée sur les programmes (CCTP), où le problème consiste à planifier un ensemble d'événements dans des salles et des créneaux horaires, mais selon les programmes de l'université. Bettinelli et al. [1] offrent un bon aperçu des problèmes de planification des cours, et Lübbecke [17] fournit des commentaires supplémentaires concernant les questions pratiques et de mise en œuvre.

Le PECTP est défini par les informations suivantes : un ensemble d'événements à programmer dans un certain nombre de créneaux horaires ; un ensemble de salles avec une capacité associée ; un ensemble de caractéristiques des salles qui peuvent être requises par les événements et satisfaites par les salles ; un ensemble d'étudiants inscrits dans différentes combinaisons d'événements ; un ensemble de créneaux horaires possibles pour chacun des événements ; et un ensemble d'exigences de précédence entre certains événements. L'objectif est d'attribuer les événements à une salle et à un créneau horaire tout en respectant les contraintes suivantes : chaque étudiant ne doit assister qu'à un événement par créneau horaire ; la salle assignée à chaque événement doit avoir une capacité suffisante et satisfaire les caractéristiques requises par l'événement correspondant ; au maximum un événement est assigné à une salle à tout moment ; les événements doivent être assignés à des créneaux horaires possibles ; et, le cas échéant, les événements doivent être programmés dans l'ordre établi par les précédences. En ce qui concerne la fonction objective, un ensemble de contraintes souples est défini, ajoutant une pénalisation pour chaque violation dans le planning : les étudiants ne devraient pas être programmés pour assister à un événement dans le dernier créneau horaire de la journée ; les étudiants ne devraient pas assister à trois événements ou plus dans des créneaux horaires successifs, et ne devraient pas être obligés d'assister à un seul événement dans une journée donnée.

Plusieurs approches ont été proposées pour le PECTP, considérant principalement des métaheuristiques puisque dans l'ITC 2007, une limite stricte de temps d'exécution était imposée aux algorithmes. La plupart d'entre elles sont conçues pour aborder le problème en deux ou trois étapes, se concentrant d'abord sur la faisabilité, puis sur l'optimalité du planning généré. Lewis [15] propose une heuristique en trois phases qui utilise le recuit simulé (SA) pour les deux dernières phases afin d'améliorer le planning généré. Jat et Yang [12] proposent une approche en deux phases utilisant des algorithmes génétiques et une recherche tabou. Chiarandini et al. [9] proposent une heuristique basée sur la recherche locale stochastique. Ceschia et al. [6] effectuent une étude approfondie du PECTP en considérant plusieurs variations du problème et proposent une métaheuristique basée sur SA. Nothegger et al. [21] proposent un algorithme d'optimisation par colonie de fourmis. Cambazard et al. [4] étudient une grande variété d'approches, y compris la programmation par contraintes (CP) et une relaxation par coloration de liste du PECTP. Enfin, van den Broek et Hurkens [23] proposent une heuristique basée sur l'ILP pour le problème. Ils utilisent une approche de génération de colonnes dans une phase de construction puis formulent un modèle ILP pour affiner la solution, en se concentrant également sur les contraintes souples. Ils rapportent des solutions compétitives comparées aux cinq finalistes de la compétition. En raison de la définition du PECTP, beaucoup de ces approches appliquent une phase de prétraitement dans laquelle les conflits entre événements sont dérivés. Par exemple, l'ensemble des événements auxquels un étudiant particulier est inscrit ne peut pas être assigné au même créneau horaire, sinon le planning viole une contrainte stricte. En général, toutes les approches ont produit de bons résultats informatiques dans les instances impliquées dans la compétition.

Une perspective différente du problème est abordée dans van den Broek et al. [24], où les auteurs étudient un véritable problème de planification à l'Université TU Eindhoven. Dans ce cas, le planning hebdomadaire est déjà donné et les étudiants ont une liste de préférence d'événements et demandent à être assignés à un certain nombre d'entre eux. L'objectif est d'assigner les étudiants aux événements en respectant des contraintes similaires au PECTP (c'est-à-dire un événement par créneau horaire, ne pas dépasser la capacité de la salle, et des contraintes de quota minimum et maximum) parmi d'autres contraintes. Ils montrent que pour certaines combinaisons de contraintes, le problème est complet et proposent une formulation en programmation linéaire en nombres entiers (ILP) pour le problème. Les résultats informatiques montrent que l'approche est efficace pour les instances réelles considérées.

Un autre problème similaire au PECTP est le problème dit de sectionnement des étudiants, qui consiste à assigner des étudiants à des sections particulières (c'est-à-dire des classes) en fonction de leurs demandes et en respectant plusieurs contraintes traditionnelles telles que la capacité des salles et des sections, et en évitant les conflits dans les emplois du temps des étudiants en raison des chevauchements d'assignations. Carter [5] décrit les caractéristiques du problème et fournit les détails du système de planification développé à l'Université de Waterloo. La construction de l'emploi du temps et le sectionnement des étudiants sont divisés en trois étapes principales : une préinscription des étudiants pour le semestre suivant ; la génération d'un emploi du temps initial (impliquant à la fois une étape automatisée et une étape manuelle) ; et la planification des étudiants, y compris une période de dépôt/ajout. Les étudiants souhaitent assister à un ensemble de cours, qui sont composés de plusieurs sections. En ce sens, le problème considère une structure plus complexe pour les cours que le PECTP, de manière similaire à notre problème. Le problème considère également qu'un étudiant souhaite suivre tous les cours de la liste fournie. Murray et al. [20] et Muller et Murray [19] s'appuient sur cette recherche, utilisant principalement la méthode proposée par Carter [5] pour construire l'emploi du temps initial. Le premier présente un cadre pour aborder le problème, incluant plusieurs considérations pratiques. Muller et Murray [19] abordent le problème global, générant l'emploi du temps initial comme dans Carter [5] et fournissant des développements supplémentaires, y compris plusieurs nouveaux opérateurs de recherche locale, pour l'étape de sectionnement des étudiants. Dans les deux cas, la recherche est motivée par son application à l'Université Purdue.

Nous incluons également une comparaison avec d'autres problèmes de la littérature concernant les emplois du temps dans les institutions éducatives. Le problème du programme académique équilibré (voir, par exemple, Chiarandini et al. [8]) vise à définir à un niveau général l'organisation des cours pour un diplôme universitaire. L'horizon de planification est divisé en années, chacune étant ensuite divisée en termes d'enseignement où les cours peuvent avoir lieu. Les cours présentent des précédences entre eux et des contraintes de charge sont imposées à chaque période d'enseignement, incluant à la fois le nombre de cours assignés et le nombre total de crédits impliqués dans une période d'enseignement. Dans un article de suivi, Ceschia et al. [7] considèrent une généralisation de ce problème.

En ce qui concerne la méthodologie, nous discutons brièvement de quelques approches concernant l'utilisation des techniques ILP dans des cadres plus généraux. Sorensen et Dahms [22] proposent une heuristique de décomposition en deux étapes basée sur une formulation ILP pour un problème de planification des lycées. Kristiansen et al. [13] considèrent un ILP pour le problème de planification des lycées, qui est résolu en deux étapes au moyen d'un solveur à usage général.

 Dans ce cas, cela aboutit à un algorithme exact. L'approche produit de bons résultats, obtenant 9 nouvelles meilleures solutions connues pour le problème. Enfin, Daskalaki et Birbas [10] considèrent un problème de planification universitaire où des groupes d'étudiants sont inscrits à un ensemble de cours, de manière similaire au PECTP. Des contraintes opérationnelles standard sont considérées, et une différence par rapport au PECTP et à notre problème est que toutes les demandes d'un étudiant doivent être satisfaites. La structure des cours est cependant plus générale que dans le PECTP et peut inclure plus d'un type de classe. Les auteurs proposent une approche en deux étapes, où certaines des contraintes opérationnelles les plus lourdes sont relâchées dans la première étape, puis reconsidérées dans la seconde, où des ILP plus petits sont formulés et résolus pour chaque jour de la semaine indépendamment.

Concernant la méthodologie proposée par Carter [5] pour le problème de sectionnement des étudiants, une matrice de conflits est d'abord construite, où chaque entrée représente le nombre d'étudiants ayant demandé chaque paire de cours. De plus, en raison de la taille du problème considéré, les étudiants sont d'abord regroupés en fonction des similitudes parmi leurs demandes de cours, puis une pré-assignation aux sections est effectuée, visant toujours à minimiser le nombre attendu de conflits. Cette étape est appelée sectionnement homogène. En utilisant cette information, le problème global, consistant en environ 3000 sections de cours et 17000 étudiants, est décomposé en plusieurs sous-problèmes en essayant de regrouper les sections avec une forte interaction, qui sont ensuite résolus indépendamment un à un par ordre décroissant de difficulté. Pour chacun de ces sous-problèmes, différentes étapes sont considérées séquentiellement. Premièrement, une étape automatisée de planification des cours est considérée où les sections sont assignées à des créneaux horaires visant à minimiser le nombre total de conflits étudiants et en considérant des informations agrégées concernant les capacités des salles en définissant des profils de salles. Cette étape est réalisée en utilisant une heuristique gloutonne suivie d'une phase de recherche locale consistant en un opérateur 2-opt. Ensuite, une étape d'affectation des salles de classe est réalisée en utilisant les informations de la préinscription et en incluant plusieurs contraintes concernant le type, la distance et la disponibilité des salles de classe. Après des améliorations manuelles apportées par les représentants de chaque département universitaire, le sectionnement original est annulé et les étudiants sont réassignés en utilisant l'emploi du temps global généré lors des étapes précédentes. Les étudiants sont sectionnés un à un en deux passes, en considérant d'abord certaines des options puis les restantes. L'objectif est d'éviter de remplir les cours uniquement par les étudiants qui se sont inscrits plus tôt.

Dans cet article, nous nous concentrons sur une application réelle émanant d'une université privée en Argentine qui implique simultanément la planification d'événements à des créneaux horaires et des salles ainsi que l'affectation des étudiants à un certain nombre d'événements choisis dans leur liste de préférences. De manière similaire au PECTP, l'affectation des événements aux créneaux horaires doit respecter certaines contraintes, qui dépendent à leur tour de l'affectation des étudiants aux événements. De plus, les cours ont une structure hiérarchique particulière, similaire au problème de sectionnement des étudiants décrit précédemment, qui doit être prise en compte lors de la réalisation des différentes affectations. Ce problème est appelé problème généralisé de planification des cours après inscription (GPECTP).

Les contributions de cet article sont triples. Premièrement, nous étudions un problème avec une application directe et pratique qui intègre, combine et aborde conjointement deux autres problèmes de la littérature connexe, à savoir le PECTP et le problème défini dans van den Broek et al. [24]. En plus de la structure hiérarchique des cours, considérée dans le problème de sectionnement, dans notre problème, seul un certain nombre des cours fournis dans la liste de préférences d'un étudiant doit être assigné (en effet, nous considérons une borne inférieure et une borne supérieure sur le nombre d'affectations pour chacun d'eux). Deuxièmement, visant à fournir une méthodologie de solution, nous proposons une formulation ILP qui intègre les caractéristiques mentionnées précédemment. Afin d'utiliser l'algorithme dans le contexte de l'université, nous développons une heuristique basée sur l'ILP en deux étapes pour le GPECTP. De manière similaire à Carter [5], la première étape définit une affectation des cours aux créneaux horaires, puis, en fonction de ces paramètres, la seconde étape assigne les étudiants aux cours. Cependant, il existe quelques différences majeures concernant la méthodologie utilisée à chacune de ces étapes. Premièrement, Carter [5], une fois que le problème est partitionné en sous-problèmes plus petits, ne génère qu'un seul emploi du temps basé sur une pré-affectation des étudiants aux sections. Dans notre cas, nous divisons l'ensemble des étudiants en sous-ensembles plus petits et en considérant une idée similaire aux profils de salles, nous générons plusieurs emplois du temps par sous-ensemble, obtenant ainsi une approche multi-démarrage pour le problème. C'est particulièrement important car, comme nous l'expliquons plus loin dans l'article, cela aide à trouver des emplois du temps réalisables et de bonne qualité. De plus, l'affectation des étudiants aux cours est effectuée de manière intégrée, en considérant également l'affectation des cours aux salles par le biais d'une formulation ILP. C'est une caractéristique importante car les affectations des étudiants aux cours, des cours aux créneaux horaires et des cours aux salles de classe sont interdépendantes. Par rapport à la littérature connexe, Carter [5] aborde ces deux problèmes de manière séquentielle : d'abord l'affectation des salles de classe, puis le sectionnement automatisé des étudiants. Une observation similaire peut être faite concernant l'approche de Muller et Murray [19], où la planification des cours et l'affectation des cours aux salles sont prises à partir de l'étape de sectionnement initiale, bien qu'ils proposent plusieurs opérateurs de recherche locale pour trouver des solutions améliorées (réalisables).

Enfin, nous rapportons les résultats obtenus sur trois instances réelles, et analysons les avantages obtenus par l'université avec la mise en œuvre de l'algorithme. Ces instances sont rendues publiques pour d'autres comparaisons sur le problème.

L'article est organisé comme suit. Dans la section 2, nous présentons le contexte de l'université et la description du GPECTP, incluant une discussion sur sa relation avec les problèmes connus de la littérature connexe. Ensuite, la section 3 introduit la notation de base et les définitions utilisées tout au long de l'article et présente une formulation ILP pour le GPECTP. Dans la section 4, nous présentons l'heuristique basée sur l'ILP développée pour résoudre le problème. Les résultats informatiques sont présentés dans la section 5 et enfin, nous tirons quelques conclusions et proposons des directions futures dans la section 6.



### 2. Description et formulation du problème

#### 2.1. Description du problème

Le problème de planification des cours universitaires (UCTP) étudié dans cet article consiste à assigner un ensemble d'événements \( E = \{e_1, e_2, ..., e_n\} \) à un ensemble de salles \( R = \{r_1, r_2, ..., r_m\} \) et à un ensemble de créneaux horaires \( T = \{t_1, t_2, ..., t_p\} \) sans violer de contraintes strictes. On a \( |E| = n \), \( |R| = m \) et \( |T| = p \). Pour décrire plus formellement les contraintes strictes, un ensemble de symboles et de définitions de variables est présenté dans le tableau suivant.

Basé sur les symboles et les variables ci-dessus, les trois contraintes strictes définies dans le problème UCTP (Tuga et al., 2007 ; Brélaz, 1979) sont listées ci-dessous.

**H1.** Tous les événements doivent être assignés à un certain créneau horaire et à une salle appropriée. Formellement, cette contrainte stricte peut être formulée comme suit : 

\[ \forall e \in E, \sum_{i=1}^{m} \sum_{j=1}^{p} v(x_{i,j} = e) = 1 \]
\[ x_{i,j} = e \implies \text{cap}(r_i) \geq \text{std}(e) \]
\[ x_{i,j} = e \implies \text{evtFea}(e) \subseteq \text{roomFea}(r_i) \]

L'équation (1) implique que tous les événements doivent être alloués dans le calendrier, où \( v \) est la fonction indicatrice de vérité qui prend la valeur 1 si la proposition donnée est vraie et 0 sinon. L'équation (2) implique qu'un événement doit être alloué à une salle ayant une capacité au moins égale au nombre d'étudiants assistant à l'événement. Notez que chaque salle possède certaines caractéristiques, comme la disponibilité de certains équipements pédagogiques, et chaque événement a des exigences particulières pour les caractéristiques de la salle. En conséquence, l'équation (3) implique que chaque événement doit être assigné à une salle spécifique où les caractéristiques correspondantes peuvent répondre à ses exigences.

**H2.** Aucun étudiant ne doit assister à deux événements ou plus durant le même créneau horaire. Mathématiquement, H2 est décrit comme suit :

\[ \forall x_{i,k}, x_{j,k} \in E, i, j = 1, 2, ..., m, k = 1, 2, ..., p, i \neq j, \text{con}(x_{i,k}, x_{j,k}) = 0 \]

où \( x_{i,k} \) et \( x_{j,k} \) désignent deux événements assignés au même créneau horaire. Comme des dizaines d'étudiants assistent à chaque événement, et qu'un étudiant peut assister à plusieurs événements, l'équation (4) assure que deux événements dans le même créneau horaire n'ont aucun étudiant commun.

**H3.** Aucune salle ne doit être réservée deux fois, c'est-à-dire qu'un seul événement est assigné à une salle durant un créneau horaire. Formellement, 

\[ \forall r_i \in R, \forall t_j \in T, \sum_{e \in E} v(x_{i,j} = e) \leq 1 \]

#### 2.2. Formulation du problème

Une solution \( X \) est généralement représentée par une matrice bidimensionnelle de dimensions \( m \times p \), où les lignes représentent les salles, les colonnes représentent les créneaux horaires, et \( x_{i,j} \) correspond à l'événement assigné à la salle \( r_i \) durant le créneau horaire \( t_j \) (i = 1, 2, ..., m, j = 1, 2, ..., p). S'il n'y a pas d'événement assigné à la salle \( r_i \) et au créneau horaire \( t_j \), alors \( x_{i,j} \) prend la valeur -1. Apparemment, basé sur cette représentation, pas plus d'un événement ne sera assigné à chaque salle durant un créneau horaire, ce qui signifie que H3 est toujours satisfait.

Selon l'algorithme proposé dans cet article, tous les événements doivent être alloués dans le calendrier dès le départ. Plus précisément, les événements sont alloués un par un dans le calendrier, et chaque événement est assigné à une salle vide qui peut répondre à ses exigences à chaque itération. Par conséquent, H1, en plus de H3, est strictement respecté dans le calendrier résultant. Cependant, durant le processus de planification, H2 est assoupli, c'est-à-dire que H2 n'est pas nécessairement strictement respecté dans le calendrier.

**Définition (solution partiellement faisable).** Dans cet article, la solution sans aucune violation de H1 et H3 est définie comme une solution partiellement faisable. Évidemment, dans une solution partiellement faisable, le nombre de violations de H2, c'est-à-dire la distance à la faisabilité, n'est pas nécessairement nul.

Basé sur cette définition, l'objectif de ce problème est converti en trouvant une solution partiellement faisable avec un nombre minimal de violations de H2. Plus formellement, il s'agit de trouver une solution \( X^* \) telle que \( f(X^*) \leq f(X) \) pour toute solution partiellement faisable \( X \) dans l'espace de recherche.

\[ f(X) = \sum_{k=1}^{p} \sum_{i=1}^{m} \sum_{j=i+1}^{m} \text{con}(x_{i,k}, x_{j,k}) \]

La fonction \( \text{con}(x_{i,k}, x_{j,k}) \) juge si les événements \( x_{i,k} \) et \( x_{j,k} \) ont des étudiants communs, et \( f(X) \) compte le nombre total de violations de H2 dans tous les créneaux horaires. De cette manière, l'équation (6) agit comme la fonction de coût pour évaluer la qualité de la solution actuelle. Lorsque \( f(X^*) \) est égal à zéro, cela signifie qu'un calendrier faisable est construit.

Il est à noter que la formulation du problème dans certains autres algorithmes de planification (Qaurooni et Akbarzadeh-T, 2013 ; Liu et al., 2011 ; Brélaz, 1979) est différente de la nôtre. Dans ces algorithmes, aucune relaxation des contraintes strictes n'est autorisée, c'est-à-dire qu'un événement est alloué au calendrier seulement s'il ne viole aucune des contraintes strictes. De cette manière, certains événements ne peuvent pas être alloués au calendrier durant un certain processus de planification, et un tableau est généralement utilisé pour conserver les événements non planifiés. En conséquence, le nombre d'événements non planifiés est considéré comme la valeur de qualité de la solution résultante, et minimiser les événements non planifiés est l'objectif d'optimisation pour ces algorithmes.

Pour assurer une comparaison équitable avec les algorithmes précédents de pointe, après avoir trouvé une solution \( X \) avec notre algorithme proposé, une simple procédure de reconfiguration (Reconfiguration()) est introduite. Plus précisément, si \( f(X) = 0 \), cela signifie que \( X \) est une solution faisable ; sinon, Reconfiguration() est employée pour retirer les événements qui causent le plus de violations de H2 de chaque créneau horaire, et les événements retirés sont conservés dans un tableau, comme indiqué par l'équation suivante :

\[ (X', \text{array}) \leftarrow \text{Reconfiguration}(X) \]

Finalement, un calendrier incomplet \( X' \) sans aucune violation de contraintes strictes est obtenu, et alors le nombre d'événements non planifiés dans le tableau peut être comparé équitablement avec les résultats obtenus par d'autres algorithmes.



### 2. Contexte et caractéristiques du problème de planification

#### 2.1. Contexte du problème

L'université offre 12 programmes d'études différents, environ 120 cours, et compte 220 membres du corps enseignant et 1200 étudiants inscrits. L'année académique est divisée en deux semestres qui sont planifiés indépendamment. Les créneaux horaires se réfèrent aux périodes d'enseignement disponibles au sein d'une semaine et restent inchangés pendant tout le semestre.

En général, le programme d'études n'est pas strict et souvent, les étudiants diplômés obtiennent leur diplôme en complétant le programme de différentes manières. Les cours sont classés comme obligatoires ou optionnels, selon le programme d'études auquel chaque étudiant est inscrit. Les premiers sont des cours que l'étudiant doit suivre (et, bien sûr, réussir) pour obtenir le diplôme correspondant. Les cours optionnels sont, quant à eux, regroupés par thématiques ; chaque étudiant doit ensuite sélectionner un nombre restreint de cours au sein de chaque thématique.

Chaque cours se compose d'un ou plusieurs modules correspondant à différents types de classes. Ces types sont des conférences, des cours pratiques et des laboratoires. Un cours se compose exactement d'une des combinaisons suivantes de types de classes, appelées modèles : des conférences, ou des conférences et des cours pratiques, ou des conférences, des cours pratiques et des laboratoires. Il convient de mentionner que chacune de ces classes se compose d'un ou plusieurs événements, qui doivent être programmés dans la semaine et peuvent avoir certaines restrictions concernant leur périodicité et leur disponibilité horaire. Par exemple, l'université pourrait exiger que certains cours soient programmés à certaines heures de la journée en raison de politiques académiques et plus générales.

De plus, un cours est composé d'une ou plusieurs commissions, qui sont des instances du même cours. Chacune de ces commissions a son propre ensemble de classes et toutes suivent exactement le même modèle en ce qui concerne les modules du cours. Une commission peut avoir plus d'une instance de chaque type de classe. Un étudiant doit être inscrit à une seule commission d'un cours et toutes les classes auxquelles il est inscrit doivent appartenir à la même commission.

La Fig. 1 illustre cela. Dans la Fig. 1(a), le cours se compose d'une seule commission et le modèle est défini par des conférences, des cours pratiques et des laboratoires. Ensuite, le modèle pour un étudiant inscrit au cours peut être n'importe quelle combinaison d'une conférence, d'un cours pratique et d'un laboratoire inclus dans la Commission 1. La Fig. 1(b) montre un cours avec deux commissions. Un étudiant doit être inscrit soit à la Commission 1, soit à la Commission 2, et au sein de chaque commission, toute combinaison de classes suivant le modèle est faisable. Par exemple, les modèles (Conf. 1.1, Pratique 1.2, Lab. 1.1) et (Conf. 1.1, Pratique 1.1, Lab. 1.1) sont faisables pour un étudiant inscrit à la Commission 1, mais le modèle (Conf. 1.1, Pratique 1.1, Lab. 2.2) est infaisable.

À la fin de chaque semestre, l'offre académique pour le semestre suivant est décidée et chaque département assigne le corps enseignant aux cours. Parallèlement à ces informations, chaque professeur informe le personnel administratif de sa disponibilité horaire et du nombre maximal de jours par semaine durant lesquels les classes assignées doivent être programmées. Ces informations, combinées aux exigences du cours, aboutissent aux créneaux horaires disponibles finaux pour chaque classe.

En ce qui concerne les infrastructures, l'université dispose de 30 salles d'une capacité de 8 à 110 personnes. La classification des salles est basée sur leurs attributs et caractéristiques spéciales comme les équipements multimédias, les ordinateurs, etc. En ce qui concerne les classes, certaines peuvent être données dans n'importe quelle salle tandis que d'autres nécessitent des attributs spécifiques (par exemple, la disponibilité d'ordinateurs).

Jusqu'à ce que le système soit mis en place, la construction de l'emploi du temps était très chronophage et itérative. Une fois toutes les informations rassemblées, le bureau administratif était responsable du processus de planification. En se basant sur les connaissances sur les étudiants potentiels pour chaque cours, le planificateur tentait manuellement de programmer les cours en évitant les conflits et en assurant que chaque étudiant ait la possibilité de suivre un nombre de cours requis. Il convient de mentionner que cet aspect est particulièrement important car, étant une université privée, chaque étudiant ayant une performance académique raisonnablement bonne doit pouvoir obtenir son diplôme dans le temps prévu pour éviter de payer des frais de scolarité supplémentaires.

À partir d'une assignation initiale, s'il y avait des conflits ou si certains étudiants ne pouvaient pas suivre les cours requis, le planificateur demandait à certains membres du corps enseignant d'accepter un autre créneau horaire et répétait le processus laborieux afin d'obtenir un emploi du temps amélioré. Une fois la planification terminée, les étudiants étaient informés des cours dans lesquels ils étaient inscrits. En conséquence de ce processus, au début du semestre, de longues files d'étudiants se formaient au bureau administratif pour demander des changements possibles dans les cours qui leur avaient été assignés. Ces demandes étaient de nouveau transmises au planificateur qui essayait, si possible, de satisfaire leurs demandes en effectuant quelques modifications.

Le processus présentait trois inconvénients majeurs. Premièrement, il était complètement inefficace et chronophage puisqu'il n'est pas humainement possible de considérer toutes les alternatives. Deuxièmement, l'ensemble du processus et la responsabilité de commencer le semestre avec l'emploi du temps à temps dépendaient principalement du planificateur. Indépendamment de ses performances exceptionnelles, cela entraînait un niveau de pression excessif et représentait un point faible du point de vue organisationnel, car tout événement imprévu (par exemple, une maladie du planificateur) pourrait compromettre le début du semestre. Enfin, les étudiants devaient avoir un statut à temps plein et leurs inscriptions aux cours étaient obligatoires, ils n'avaient pas la possibilité de choisir les cours auxquels ils souhaitaient s'inscrire pour le semestre.

En raison de cette situation complexe, l'université a décidé de développer un système pour assister le planificateur dans le processus de planification. De plus, dans le but de surmonter le troisième inconvénient mentionné précédemment, tout le processus de planification devait suivre une approche basée sur la demande. Compte tenu du contexte et des exigences de l'université, notre suggestion est de fournir aux étudiants un ensemble de cours qu'ils souhaitent suivre, une liste de préférences, qui inclut plus de possibilités que le nombre maximal de cours qu'ils sont autorisés à suivre, et de leur permettre de classer les cours selon leurs préférences. Nous établissons également pour chaque étudiant un nombre minimal de cours qui doivent être sélectionnés dans sa liste de préférences, afin de garantir un minimum de progression académique possible pour le semestre. De plus, l'université classe les étudiants selon leurs résultats académiques et d'autres critères, qui sont également pris en compte dans le processus de planification. Ensuite, le problème d'optimisation que nous abordons consiste à maximiser la préférence pondérée globale (une combinaison des préférences des étudiants et des performances de classement) tout en assignant les cours aux créneaux horaires, en tenant compte des choix faits par les étudiants et de plusieurs autres contraintes de ressources de l'université.

Une différence concernant le GPECTP et d'autres problèmes de planification est que nous devons considérer toutes les contraintes opérationnelles et de ressources comme strictes. Cela a bien sûr un impact sur la difficulté de trouver un emploi du temps faisable respectant toutes les contraintes. Les autorités universitaires donnent la priorité à toutes les contraintes et décident que, dans le cas où aucune solution faisable n'est trouvée, le système doit être utilisé dans des scénarios moins restrictifs (par exemple, en élargissant les créneaux horaires disponibles pour le personnel académique ou en réduisant le nombre minimal de cours à attribuer à chaque étudiant).

Comme mentionné dans l'introduction, le GPECTP prend en compte simultanément des caractéristiques du PECTP et de la recherche de van den Broek et al. [24]. Ce dernier prend en compte les listes de préférences, mais suppose que l'assignation des événements aux créneaux horaires a déjà été faite et que c'est une donnée d'entrée du problème. D'autre part, si l'ensemble des cours fournis par un étudiant représente effectivement les cours auxquels il est inscrit, alors le problème devient le PECTP – malgré certaines différences dans les contraintes particulières considérées. Cependant, dans notre cas, les attributions de cours aux étudiants sont l'un des résultats du problème. Plus précisément, dans le PECTP, les événements auxquels un étudiant doit être assigné sont connus a priori. Par conséquent, dans l'approche de coloration de liste proposée par Cambazard et al. [4], l'ensemble des événements choisis par un étudiant définit, comme ils le nomment, une clique d'étudiant. Tous ces événements doivent être programmés dans différents créneaux horaires, permettant une phase de prétraitement où les conflits entre événements peuvent être dérivés et utilisés dans l'optimisation.

Dans le cas du GPECTP, cette analyse n'est pas possible pour les deux raisons suivantes. Premièrement, puisque la liste de préférences d'un étudiant contient généralement plus de cours (et donc d'événements) que le nombre maximal de cours autorisés à suivre

 simultanément, alors les conflits entre les événements dépendent des cours effectivement inscrits, ce qui à son tour dépend des créneaux horaires attribués aux événements. De plus, même en supposant que nous connaissions exactement les cours à attribuer à un étudiant particulier, la structure hiérarchique des cours et sa composition en termes de commissions ont un effet similaire, puisque les événements effectivement inscrits ne sont pas connus a priori et, de plus, c'est l'un des résultats du GPECTP.

Dans la section suivante, nous présentons la notation et les définitions formelles utilisées tout au long de l'article ainsi que la formulation ILP pour le problème. Étant donné que le problème implique un grand nombre de contraintes, elles sont expliquées en détail lors de la formulation du modèle.


### 3. Formulation en ILP

#### 3.1. Définitions et notation

Nous commençons par introduire quelques définitions de base et la notation utilisée pour décrire le problème. Pour des raisons de clarté, nous regroupons les définitions selon l'entité (étudiants, cours et créneaux horaires). Étant donné le grand nombre de paramètres et de définitions, nous avons adopté les critères de notation suivants. Les définitions sont référencées avec des exposants, tandis que les variables de décision utilisent des indices. Les ensembles sont identifiés par des lettres majuscules et les poids utilisés dans la fonction objective par des lettres grecques.

##### 3.1.1. Jours et créneaux horaires

Comme mentionné précédemment, l'emploi du temps considère une semaine. La semaine est modélisée comme une collection de jours consécutifs, chacun étant défini par une collection de créneaux horaires consécutifs où les événements sont programmés. En pratique, la semaine se compose de six jours, du lundi au samedi. Le samedi est défini par deux créneaux horaires, tandis que les jours ouvrables restants sont définis par cinq créneaux horaires. Les créneaux horaires sont numérotés dans l'ordre croissant selon leur position dans la semaine.

- **D** : Ensemble des jours ouvrables.
- **S_d** : Ensemble des créneaux horaires définissant le jour ouvrable \(d \in D\).
- **s_d** : Premier et dernier créneau horaire du jour ouvrable \(d \in D\), respectivement.
- **S** : Ensemble des créneaux horaires.

##### 3.1.2. Salles

Pour chaque salle, nous identifions deux attributs : sa capacité d'accueil et son type, qui est une classification interne faite par l'université.

- **R** : Ensemble des salles.
- **Types** : Ensemble des types de salles.
- **cap(r)** : Capacité de la salle \(r \in R\).
- **nr_i** : Nombre de salles de type \(i\) pour \(i \in Types\).
- **Classes_i** : Classes pouvant être assignées aux salles de type \(i\).
- **t(r)** : Type de salle \(r \in R\).

##### 3.1.3. Cours

Les définitions ci-dessous représentent la structure hiérarchique des cours introduite précédemment. Chaque événement inclus dans une classe est censé s'intégrer exactement dans un créneau horaire et toutes les classes ont une périodicité, ce qui signifie qu'une classe doit être donnée un certain nombre de jours, avec un nombre fixe d'événements par jour. Soit \(c\) une classe, avec \(V_c\) son ensemble d'événements, \(nd_c\) sa périodicité hebdomadaire et \(nv_c\) le nombre d'événements par jour. Alors, \(|V_c| = nd_c \times nv_c\). Enfin, il convient de mentionner que l'ordre dans lequel les événements d'une classe sont programmés n'est pas pertinent et, par conséquent, fixé a priori.

- **C** : Ensemble des cours.
- **Cl** : Ensemble des classes.
- **G** : Ensemble des groupes de cours.
- **Qm** : Commissions du cours \(m \in C\).
- **Tm** : Classes de conférences du cours \(m \in C\).
- **Clm** : Ensemble des classes du cours \(m \in C\).
- **Lec_q** : Classes de conférences de la commission \(q\).
- **Ex_q** : Classes pratiques de la commission \(q\).
- **Lab_q** : Classes de laboratoire de la commission \(q\).
- **Slots_c** : Créneaux horaires faisables pour la classe \(c \in Cl\).
- **V_c** : Ensemble des événements de la classe \(c \in Cl\).
- **nd_c** : Périodicité hebdomadaire de la classe \(c \in Cl\).
- **nv_c** : Nombre d'événements consécutifs le même jour pour la classe \(c \in Cl\).
- **Init_c** : Événements initiaux pour chacun des blocs \(nd_c\) d'événements consécutifs pour la classe \(c \in Cl\).
- **R_c** : Ensemble des salles admissibles pour la classe \(c \in Cl\).
- **q_c** : Quota de la classe \(c \in Cl\).
- **nreqm** : Nombre d'étudiants qui doivent suivre le cours \(m \in C\).

##### 3.1.4. Étudiants

Chaque étudiant doit fournir une liste de préférences de cours, à partir de laquelle un sous-ensemble contenant un minimum et un maximum de cours sera sélectionné. L'attribution des cours pour le semestre sera basée sur ce sous-ensemble. Dans la liste de préférences, certains cours peuvent être marqués comme requis, ce qui signifie que l'étudiant doit être inscrit à au moins une commission de ce cours. Cela se fait en utilisant une valeur de préférence particulière.

Les cours restants sont classés comme obligatoires ou optionnels. Les cours optionnels appartiennent exactement à un groupe, pour lequel il y a aussi un nombre minimum et maximum de cours pouvant être attribués à un étudiant. Bien que les groupes soient définis par programme d'études, nous adoptons une définition particulière pour chaque étudiant afin de capturer la nature des différentes situations des étudiants. Par exemple, un étudiant peut avoir déjà réussi certains cours d'un groupe particulier, mais peut encore en sélectionner d'autres. Dans ce sens, étant donné un étudiant \(a \in A\), \(G_a\) est l'ensemble contenant les définitions de chaque groupe. Nous supposons que deux groupes définis pour un étudiant ne peuvent pas partager de cours.

Enfin, nous notons que plus le classement d'un étudiant est élevé, plus la priorité est grande.

- **A** : Ensemble des étudiants.
- **rk_a** : Poids de performance académique pour l'étudiant \(a \in A\).
- **m_a** : Nombre maximum de cours à attribuer à l'étudiant \(a \in A\).
- **ma** : Nombre minimum de cours à attribuer à l'étudiant \(a \in A\).
- **M_a** : Ensemble de cours choisis par l'étudiant \(a \in A\).
- **G_a** : Ensemble de définitions de groupes choisis par l'étudiant \(a \in A\).
- **w_am** : Valeur de préférence pour le cours \(m \in C\) donnée par l'étudiant \(a \in A\).
- **m_ag** : Nombre maximum de cours à attribuer à l'étudiant \(a \in A\) d'un groupe \(g \in G_a\).
- **Sl_a** : Créneaux horaires disponibles pour l'étudiant \(a \in A\).

##### 3.1.5. Membres du corps enseignant

Enfin, nous introduisons quelques notations pour les membres du corps enseignant. Avec les créneaux horaires disponibles, chaque membre indique également un nombre maximum de jours qu'il/elle est prêt(e) à utiliser pour l'enseignement. Ensuite, toutes les classes attribuées à ce membre doivent être programmées en tenant compte de cela.

- **F** : Ensemble des membres du corps enseignant.
- **S_f** : Créneaux horaires disponibles pour \(f \in F\).
- **Cf** : Classes enseignées par \(f \in F\).
- **ndays_f** : Nombre maximum de jours par semaine où \(f \in F\) veut donner des cours.

Bien que l'affectation du personnel enseignant aux classes soit supposée être faite à un stade antérieur, elle affecte les créneaux horaires où une classe donnée peut être attribuée. Par conséquent, l'ensemble des créneaux horaires faisables d'une classe \(c \in Cl\) doit également tenir compte des créneaux horaires disponibles du personnel assigné, c'est-à-dire \(Slots_c \cap S_f \cap C_f\). À des fins de notation, nous ferons référence à cet ensemble comme \(Slots_c\).

#### 3.2. Variables de décision

Nous considérons six ensembles de variables binaires pour modéliser les différentes contraintes de l'emploi du temps. La variable binaire \(x_{ac}\) prend la valeur 1 si l'étudiant \(a \in A\) est assigné à la classe \(c \in Cl_m\), pour \(m \in M_a\). Nous définissons également la variable binaire \(x_{sacs}\) qui prend la valeur 1 si la classe \(c\) assignée à l'étudiant \(a\) est programmée au créneau horaire \(s \in Slots_c \cap Sl_a\). Ces deux ensembles de variables nous permettent de gérer l'aspect assignation étudiant-classe de l'emploi du temps.

Étant donné une classe \(c \in Cl\) et un événement \(v \in V_c\), la variable binaire \(y_{cvs}\) prend la valeur 1 si \(v\) est assigné au créneau horaire \(s \in Slots_c\). En outre, la variable binaire \(y_{rcrs}\) prend la valeur 1 si la classe \(c \in Cl\) est assignée à la salle \(r \in R_c\) au créneau horaire \(s \in Slots_c\) et la variable

 binaire \(w_c\) prend la valeur 1 si la classe \(c \in Cl\) est programmée dans l'emploi du temps. Ces trois ensembles de variables nous permettent de modéliser l'affectation des classes aux salles et aux créneaux horaires.

Enfin, nous définissons des variables pour modéliser les restrictions imposées par les membres du corps enseignant. Les variables binaires \(z_{fd}\) prennent la valeur 1 si le professeur \(f \in F\) a une classe assignée au jour \(d \in D\).

Nous décrivons ensuite en détail les contraintes qui définissent un emploi du temps faisable.

#### 3.3. Modélisation des contraintes du problème

La formulation que nous présentons ci-dessous modélise les contraintes habituelles qui apparaissent dans les problèmes d'emploi du temps académique ainsi que certaines contraintes particulières considérées dans ce cas. Des détails spécifiques sont donnés avec chaque type de contrainte.

##### 3.3.1. Contraintes d'affectation étudiant-cours

Chaque étudiant informe une liste de préférences de cours qu'il/elle souhaite suivre pendant le semestre, à partir de laquelle un sous-ensemble contenant au moins \(ma\) et au plus \(m_a\) doit être attribué. Les groupes sont gérés de manière similaire. Pour chaque cours attribué, le modèle doit être faisable et le quota pour chaque classe ne doit pas être dépassé.

En ce qui concerne la structure des cours et leur affectation correcte à une commission, nous notons que les modèles faisables incluent toujours une classe de conférence. Ainsi, nous utilisons ce type de classes pour gérer l'affectation d'un étudiant à une commission et établir ensuite les relations nécessaires pour conformer un modèle faisable. Pour des raisons de simplicité, une commission a un ensemble vide de classes d'un type de classe particulier si et seulement si le modèle pour le cours ne les inclut pas. Enfin, les classes ont un quota assigné, qui ne doit pas être dépassé:

1. \(\sum_{c \in T_m} x_{ac} \leq 1 \quad \forall a \in A, m \in M_a\)
2. \(\sum_{c \in Lec_q} x_{ac} = \sum_{c \in Ex_q} x_{ac} \quad \forall a \in A, m \in M_a, q \neq \emptyset\)
3. \(\sum_{c \in Lec_q} x_{ac} = \sum_{c \in Lab_q} x_{ac} \quad \forall a \in A, m \in M_a, q \neq \emptyset\)
4. \(m_a \leq \sum_{c \in T_m, m \in M_a} x_{ac} \leq \overline{m_a} \quad \forall a \in A\)
5. \(\sum_{c \in T_m, m \in g} x_{ac} \leq \overline{m_{ag}} \quad \forall a \in A, g \in G_a\)

Les contraintes (1) établissent que chaque étudiant doit être assigné à au plus une classe de conférence des cours dans la liste de préférences. Si un cours est marqué comme requis pour l'étudiant, la contrainte est imposée par égalité. Les contraintes (2) et (3) forcent l'affectation à un cours à être un modèle faisable. Les contraintes (4) limitent le nombre minimum et maximum de cours pouvant être attribués à un étudiant, et les contraintes (5) établissent une restriction analogue au sein des groupes définis par l'étudiant.

##### 3.3.2. Contraintes de faisabilité des classes-créneaux horaires

L'affectation des classes aux créneaux horaires doit satisfaire différents types de restrictions. Pour qu'un emploi du temps soit faisable, la structure en blocs de la classe doit être respectée et chaque événement doit être attribué à exactement un créneau horaire, sans chevauchements entre eux. De plus, certaines des classes composées de deux blocs ou plus ne peuvent pas être attribuées à des jours consécutifs (en raison de préférences pédagogiques):

6. \(\sum_{ac} x_{ac} \leq q_c w_c \quad \forall c \in Cl\)
7. \(\sum_{s \in Slots_c} y_{cvs} = w_c \quad \forall c \in Cl, v \in V_c\)
8. \(\sum_{s \in S_d} y_{cvs} \leq 1 \quad \forall v \in Init_c, d \in D\)
9. \(\sum_{s \in Slots_c} y_{cvs} = nv_c y_{cvis} \quad \forall v \in Init_c\)
10. \(\sum_{s \in S_d} y_{cvs} + y_{cvis} \leq 1 \quad \forall v \in Init_c, d \in D, c \in Cl\)

Les contraintes (6) établissent que si une classe est programmée, alors son quota ne doit pas être dépassé. Les contraintes (7) programment les événements d'une classe à exactement un créneau horaire faisable si la classe est programmée, et les contraintes (8) établissent qu'au plus un événement de chaque bloc peut être programmé au sein d'une journée. De plus, les contraintes (9) assurent que les événements consécutifs dans un bloc de classe sont programmés à des créneaux horaires consécutifs au sein de la même journée. Notez que ces trois dernières contraintes modélisent l'affectation correcte des événements aux créneaux horaires en termes de conflits de chevauchement des créneaux. Enfin, les inégalités (10) établissent que différents blocs d'une classe doivent être programmés à des jours non consécutifs. Notez qu'il suffit d'exprimer ces contraintes uniquement en termes de l'événement initial de chaque bloc, puisque les contraintes (9) imposent l'affectation de l'ensemble du bloc à des créneaux horaires consécutifs au sein de la même journée. Il est à noter que les contraintes (10) s'appliquent uniquement aux classes avec des exigences de jours non consécutifs. Pour ces classes, les contraintes (8) peuvent être omises puisqu'elles sont dominées par (10).

##### 3.3.3. Contraintes de faisabilité des classes-salles

L'affectation des classes aux salles est faisable si elle satisfait certaines restrictions standard, principalement en évitant de dépasser la capacité de la salle et les chevauchements dans un créneau horaire. Les contraintes (11) établissent que si une classe est attribuée, alors tous ses événements doivent être attribués à exactement une salle dans le créneau horaire correspondant. Les contraintes (12) forcent qu'au plus un événement soit attribué à une salle dans un créneau horaire et les contraintes (13) assurent que la capacité d'une salle n'est pas dépassée. En plus de ces contraintes de faisabilité, les inégalités (14) forcent différents événements dans un bloc à être attribués à la même salle. Cela est similaire à la contrainte de stabilité de la salle dans les problèmes d'emploi du temps universitaires apparentés:

11. \(\sum_{r \in R} y_{crs} = y_{cvs} \quad \forall c \in Cl, s \in Slots_c\)
12. \(\sum_{c \in Cl} y_{crs} \leq 1 \quad \forall r \in R, s \in Slots_c\)
13. \(\sum_{acs} x_{acs} \leq cap(r) y_{crs} \quad \forall c \in Cl, r \in R\)
14. \(\sum_{y_{cvis}} y_{crs} = y_{crs} \quad \forall c \in Cl, v \in Init_c, r \in R, s \in Slots_c\)

##### 3.3.4. Contraintes de faisabilité étudiant-créneau horaire

Ces contraintes sont nécessaires pour garantir que l'emploi du temps est faisable pour les étudiants. De manière similaire au PECTP, nous devons empêcher un étudiant d'être assigné à plus d'une classe dans un créneau horaire particulier. De plus, l'emploi du temps exige spécifiquement que les conditions soient satisfaites en ce qui concerne le nombre de classes dans le cours attribué et la répartition des classes attribuées à un étudiant sur une journée donnée:

15. \(y_{cvs} + x_{acs} - x_{acs} \leq 1 \quad \forall a \in A, m \in M_a, c \in Cl_m, v \in V_c, s \in Slots_c\)
16. \(\sum_{v \in V_c} x_{acs} - y_{cvs} \leq 0 \quad \forall a \in A, m \in M_a, c \in Cl_m, s \in Slots_c\)
17. \(\sum_{c \in Cl_m} x_{acs} \leq 1 \quad \forall a \in A, s \in Slots_c\)
18. \(\sum_{c \in Cl_m, s \in S_d} x_{acs} \leq 2 \quad \forall a \in A, m \in M_a, d \in D\)

Les

 inégalités (15) et (16) établissent la correspondance entre les variables \(x_{ac}\), \(y_{cvs}\) et les variables \(x_{sacs}\). Les contraintes (17) forcent que les étudiants ne soient pas assignés à plus d'un événement dans un créneau horaire, afin de fournir à chaque étudiant un emploi du temps faisable, et les contraintes (18) établissent que dans une journée, un étudiant ne peut pas avoir plus de deux événements appartenant au même cours. Cette caractéristique est imposée par l'université pour des raisons pédagogiques.

Enfin, bien que les étudiants soient supposés avoir un statut à temps plein, l'université a décidé de ne pas générer d'affectations pour les étudiants où ils sont obligés d'assister à un cours dans le premier et dernier créneau horaire d'une journée, sans avoir d'activités entre les deux. À cette fin, les contraintes (19) établissent que si les événements des étudiants sont programmés dans le premier et le dernier créneau horaire d'une seule journée, alors au moins un des créneaux horaires intermédiaires doit également avoir un événement assigné:

19. \(x_{acs} + x_{acs} + x_{acs} \leq 1 \quad \forall a \in A, m \in M_a, c \in Cl_m, s \in Slots_c\)

##### 3.3.5. Contraintes de faisabilité classe-enseignant

Le modèle doit tenir compte de la faisabilité de l'emploi du temps en fonction des informations fournies par les membres du corps enseignant, basées sur leur disponibilité et le chevauchement des événements assignés au même professeur. À cette fin, les contraintes (20) empêchent le modèle de considérer des solutions avec plus d'un événement assigné au même professeur dans le même créneau horaire. De plus, les inégalités (21) et (22) sont nécessaires pour satisfaire les restrictions imposées par chaque professeur concernant le nombre maximum de jours pendant lesquels ils sont prêts à donner des cours. En particulier, les inégalités (21) activent les variables \(z_{fd}\) si le professeur \(f\) a au moins un bloc d'événements assigné au jour \(d\), et les inégalités (22) limitent le nombre de ces variables pouvant prendre la valeur 1 en fonction du nombre maximum informé à l'administration:

20. \(\sum_{c \in C, v \in V_c} y_{cvs} \leq 1 \quad \forall f \in F, s \in S_f\)
21. \(\sum_{c \in C_f, v \in Init_c, s \in S_d} y_{cvs} + z_{fd} \leq |S_f| \quad \forall f \in F, d \in D\)
22. \(\sum_{d \in D} z_{fd} \leq \overline{ndays_f} \quad \forall f \in F\)

#### 3.4. Fonction objective et formulation en ILP

Pour compléter la description de la formulation en ILP, nous modélisons la fonction objective. Pour chaque étudiant \(a \in A\), nous considérons une somme pondérée entre la valeur de préférence d'un cours \(m \in M_a\) et sa priorité de classement. En particulier, compte tenu de la structure des cours et des modèles faisables définis, un étudiant \(a \in A\) est inscrit à un cours si et seulement s'il est inscrit à l'une de ses conférences. En tenant compte des variables de décision \(x_{ac}\), nous définissons en outre \(w_c = w_{ac} = w_{am}\) pour \(a \in A\), \(m \in M_a\), \(c \in T_m\). Ainsi, en considérant des poids non négatifs \(\alpha\) et \(\beta\), la formulation en ILP maximise la préférence totale pondérée pour les affectations des étudiants aux cours, sous réserve des contraintes de faisabilité:

\[
\max \sum_{a \in A} \sum_{m \in M_a} \alpha w_{am} x_{ac} + \beta rk_a x_{ac}
\]

Cette formulation a un grand nombre de variables et de contraintes pour les instances réelles, ce qui la rend difficile à résoudre par un solveur ILP à usage général tel que CPLEX. En effet, lors des expériences computationnelles préliminaires, l'algorithme par défaut de CPLEX a montré des difficultés à trouver d'abord des solutions faisables, et également à améliorer la borne supérieure, même après avoir énuméré un grand nombre de nœuds. Trouver une solution faisable est un problème difficile en raison du grand nombre de contraintes opérationnelles imposées. En ce qui concerne les bornes supérieures, puisque l'emploi du temps des événements dans les créneaux horaires et l'affectation des étudiants aux cours sont traités ensemble, les techniques traditionnelles utilisées dans les algorithmes ILP ne sont pas aussi puissantes que dans d'autres problèmes. Par exemple, la phase de prétraitement appliquée au PECTP ne peut pas être directement appliquée au GPECTP, car l'incompatibilité des événements dépend des affectations des étudiants aux cours, qui à leur tour dépendent des affectations des événements aux créneaux horaires. Une observation similaire peut être faite concernant les règles de branchement standard.

### 4. Méthodologie de la solution

#### 4.1. Approche globale

Pour les raisons mentionnées précédemment, nous développons une procédure heuristique en deux étapes basée sur la formulation décrite dans la section précédente. Le schéma de la procédure est le suivant. Dans la première étape, nous générons des affectations de classes à des créneaux horaires en considérant un sous-ensemble d'étudiants et une relaxation de la formulation ILP, nommée GPECTP-RED. Ensuite, pour chaque affectation générée, nous procédons à la résolution du modèle GPECTP-ILP en fixant certaines des variables aux valeurs de la solution obtenue lors de la première étape. Enfin, le meilleur emploi du temps est sélectionné comme solution finale.

Comme mentionné précédemment, l'idée derrière la deuxième étape est plutôt simple : étant donné une sortie produite par GPECTP-RED, fixer l'affectation des classes aux créneaux horaires et résoudre la formulation GPECTP-ILP. Cependant, considérer une seule affectation de classes aux créneaux horaires de la première étape peut aboutir à une solution de mauvaise qualité ou, pire encore, à l'incapacité de trouver un emploi du temps faisable respectant toutes les contraintes. Ainsi, nous générons aléatoirement l sous-ensembles réduits d'étudiants \( \overline{A_1}, \overline{A_2}, \ldots, \overline{A_l} \) à utiliser dans la première étape. En considérant ces sous-ensembles, nous introduisons dans la première étape certaines des informations utilisées dans la deuxième étape. En effet, malgré quelques contraintes relâchées et une fonction objective partiellement reformulée, résoudre GPECTP-RED est en quelque sorte similaire à résoudre GPECTP-ILP mais à plus petite échelle.

De plus, pour chacun de ces sous-ensembles, nous avons décidé de considérer plus d'une solution lors de la première étape, en appliquant la deuxième étape pour chacune d'elles. Cela se fait par le biais de la routine populate de CPLEX, qui, donnée une formulation ILP, essaie de générer des solutions optimales ou sous-optimales alternatives et de les stocker dans un pool. Dans ce schéma, la première étape agit comme une sorte de phase de construction et la deuxième étape comme une procédure de recherche locale.

Pour la construction des sous-ensembles \( \overline{A_1}, \overline{A_2}, \ldots, \overline{A_l} \), nous adoptons la stratégie suivante. Initialement, tous les sous-ensembles contiennent les étudiants suivants :
1. Tous les étudiants se trouvant dans les \( K \% \) du classement le plus élevé, et
2. Pour chaque étudiant ayant au moins une matière requise non incluse dans 1, nous incluons un étudiant artificiel ne considérant que les matières requises.

Ensuite, les étudiants non considérés dans la définition précédente sont assignés aléatoirement à exactement un des l sous-ensembles. Il convient de mentionner que l'étudiant artificiel inclus dans 2 est remplacé si l'étudiant original est assigné au sous-ensemble.

Avant de décrire l'heuristique en détail, nous discutons d'abord d'un problème particulier identifié lors du déploiement de l'algorithme. Bien que l'université ait exigé la construction de l'emploi du temps basée sur le classement des étudiants, en pratique, ils ont analysé la qualité des emplois du temps en considérant également le pourcentage d'affectations des étudiants aux cours. Formellement, soit \( \pi = (x^*, x^*_{s}, y^*, z^*, w^*, r^*_{c}, r^*_{c}) \) le vecteur caractéristique d'une solution faisable de GPECTP-ILP, alors ils sont également intéressés par les métriques suivantes :

\[
r = \frac{\sum_{a \in A} \sum_{m \in M_a} \sum_{c \in T_m} x_{ac}}{\sum_{a \in A} \overline{m_a}}
\]

qui donne le ratio entre le nombre d'affectations des étudiants aux cours dans la solution et le nombre maximum possible d'affectations, où l'emploi du temps assigne à chaque étudiant le nombre maximum possible de cours. En considérant la fonction objective définie dans GPECTP-ILP, les solutions avec une meilleure valeur objective n'ont pas nécessairement une valeur plus élevée de r. Par conséquent, nous avons adopté la stratégie suivante : chaque fois qu'une nouvelle solution actuelle est trouvée lors de la deuxième étape, elle est stockée et signalée une fois l'exécution terminée. Avec ces informations, il est possible d'analyser plus d'un emploi du temps et de sélectionner celui que le planificateur préfère.

Dans l'algorithme 1, nous montrons le schéma de la procédure globale. En tant que paramètres d'entrée, en plus de la définition de l'instance, l'utilisateur choisit le nombre de sous-ensembles l et le nombre de solutions (N) à générer pour chaque sous-ensemble lors de la première étape, la limite de temps pour la deuxième étape (TILIM), et le seuil (K) pour calculer les sous-ensembles restreints \( \overline{A} \). Ce dernier est une valeur comprise entre 0 et 100, représentant les K pour cent des étudiants ayant le classement le plus élevé.

**Algorithme 1. ALGORITHME GLOBAL.**

Input: Instance, l, N, TILIM, K

Output: Ensemble \( \Delta \) des emplois du temps faisables pour GPECTP.

1. Formuler le modèle GPECTP-ILP. Calculer UB comme la valeur optimale de sa relaxation LP pour rapporter une métrique de qualité sur les solutions finales.
2. Calculer \( \overline{A_1}, \ldots, \overline{A_l} \) selon K.
3. Définir BESTLB = -∞ et \( \Delta = \emptyset \) comme le pool de solutions de l'emploi du temps.
4. pour \( j = 1, \ldots, l \) faire:
5. Formuler le ILP de la première phase pour le sous-ensemble \( \overline{A_j} \), le résoudre et générer N affectations faisables de classes aux créneaux horaires en utilisant la routine populate. Soit \( \Gamma_j \) le pool de solutions.
6. pour \( \Gamma \in \Gamma_j \) faire:
7. Soit \( x_i \) la i-ème solution de la première phase. Construire le modèle ILP et fixer les variables affectant les classes aux créneaux horaires. Définir \( UB(i) \) comme la fonction objective de la relaxation LP.
8. Si \( UB(i) \leq BESTLB \), alors sauter cette solution et retourner à 7 avec la solution \( i + 1 \) de \( \Gamma \).
9. Sinon, résoudre l'ILP actuel pour (au plus) TILIM secondes. Soit \( z(i) \) la fonction objective de la meilleure solution trouvée lors de l'optimisation de la deuxième étape. Si \( z(i) > BESTLB \), alors définir \( BESTLB = z(i) \), stocker la solution dans \( \Delta \) et continuer avec la solution \( i + 1 \) de \( \Gamma_j \).
10. fin pour
11. fin pour
12. Rapporter toutes les solutions dans \( \Delta \).

#### 4.2. Étape 1 : Construction des classes-créneaux horaires

Pour générer une affectation faisable des classes aux créneaux horaires, nous simplifions le problème de deux manières différentes. Premièrement, nous considérons un ensemble restreint d'étudiants \( \overline{A} \subseteq A \) afin de réduire la taille du modèle. Deuxièmement, nous écartons les contraintes de capacité des salles du modèle et incluons seulement une restriction quantitative. Soit \( nr_i \) le nombre de salles de type \( i \in Types \) et \( Classes_i \subseteq Cl \) l'ensemble des classes pouvant être affectées aux salles de type \( i \), alors pour chaque créneau horaire le nombre de classes assignées de type \( i \) ne peut pas dépasser \( nr_i \). Clairement, cela est une relaxation du problème global et ne garantit pas la capacité d'accueil fixe des salles.

Comme à cette étape nous ne nous intéressons qu'à l'affectation des classes aux créneaux horaires, considérer un ensemble restreint d'étudiants \( \overline{A} \) peut aboutir à des emplois du temps avec une caractéristique indésirable : pour les cours qui ne sont requis par aucun étudiant dans \( \overline{A} \), les événements de ces cours peuvent se chevaucher de telle manière qu'aucune affectation faisable ne peut être réalisée. Cela peut conduire à des affectations myopes de classes aux créneaux horaires, qui ne sont raisonnables (ou même faisables) que dans le cas des étudiants inclus dans \( \overline{A} \), ce qui se traduit par des solutions globales de mauvaise qualité à la deuxième étape. D'un autre côté, forcer l'emploi du temps à affecter chaque classe du cours à des créneaux horaires non chevauchants peut être trop exigeant en termes de faisabilité, spécialement

 pour les cours ayant plusieurs commissions.

Pour surmonter ce problème, nous imposons dans la formulation ILP qu'à partir de cette étape au moins un modèle faisable doit être affecté à des créneaux horaires non chevauchants. Pour les cours où le modèle est juste une conférence, clairement la faisabilité est imposée par les inégalités définies par la formulation originale. Pour les cours où le modèle est une conférence et un exercice pratique, nous imposons que chaque conférence doit avoir au moins un exercice pratique faisable pour former un modèle, et vice versa. Une idée similaire est appliquée pour les classes où les modèles faisables doivent avoir un de chaque type de classe, c'est-à-dire conférence, exercice pratique et laboratoire. Dans ce dernier cas, nous envisageons d'ajouter ces contraintes par paires (par exemple, une conférence avec un laboratoire) ou en groupes de trois (pour une conférence, il doit exister un exercice pratique et un laboratoire qui ensemble forment un modèle faisable).

Nous commençons par modéliser le premier cas, où les modèles faisables sont conférence et exercice pratique. Formellement, soit \( m \in C \), \( q \in Q_m \) tel que \( Lab_q = \emptyset \), et considérons \( c_1 \in Lec_q \), \( c_2 \in Ex_q \), nous définissons les variables binaires \( rc_{c1c2} \) qui prennent la valeur un si et seulement si la classe \( c_1 \) est liée à la classe \( c_2 \), où le terme "lié" signifie qu'elles forment un modèle faisable. De plus, nous considérons les variables \( y_{cvs} \), \( w_c \), \( x_{ac} \) et \( x_{sacs} \) définies précédemment et restreintes, le cas échéant, à l'ensemble \( \overline{A} \). Pour toutes ces inégalités, sauf indication contraire, nous supposons \( Lec_q \neq \emptyset \) et \( Ex_q \neq \emptyset \) :

24. \(\sum_{c_2 \in Ex_q} rc_{c1c2} \geq 1 \quad \forall c_1 \in Lec_q, \forall q \in Q_m\)
25. \(\sum_{c_1 \in Lec_q} rc_{c1c2} \geq 1 \quad \forall c_2 \in Ex_q, \forall q \in Q_m\)
26. \(rc_{c1c2} + w_{c1} - w_{c2} \leq 1 \quad \forall c_1 \in Lec_q, \forall c_2 \in Ex_q, \forall q \in Q_m\)
27. \(rc_{c1c2} + w_{c2} - w_{c1} \leq 1 \quad \forall c_1 \in Lec_q, \forall c_2 \in Ex_q, \forall q \in Q_m\)
28. \(\sum_{v \in V_{c1}} y_{c1vs} + \sum_{v \in V_{c2}} y_{c2vs} \leq 1 - rc_{c1c2} \quad \forall c_1 \in Lec_q, \forall c_2 \in Ex_q, \forall q \in Q_m, \forall s \in Slots_{c1} \cap Slots_{c2}\)

Les contraintes (24) et (25) établissent que chaque conférence doit être liée à au moins un exercice pratique, et vice versa. En se basant sur cette relation, les contraintes (26) et (27) imposent que si une classe est programmée, alors ses classes liées sont également programmées. Les contraintes (28) interdisent aux classes liées d'être affectées au même créneau horaire.

Les contraintes (29) établissent que si aucune classe de conférence n'est programmée pour un cours particulier, alors aucun exercice pratique ne l'est non plus puisqu'il n'y a aucune possibilité de construire un modèle faisable. Les contraintes (30) établissent que le nombre de classes nécessitant un type particulier de salle ne dépasse pas la disponibilité de ce type de salle.

Nous considérons une approche similaire pour les cours ayant comme modèle faisable une classe de chaque type, c'est-à-dire une conférence, un exercice pratique et un laboratoire appartenant à la même commission. Soit \( rc_{tpl} \) une variable binaire qui prend la valeur un si et seulement si les classes \( t \in Lec_q \), \( p \in Ex_q \) et \( l \in Lab_q \) sont liées, pour \( q \in Q_m \), \( m \in C \). La combinaison des classes \( t, p \) et \( l \) représente un modèle faisable pour un étudiant inscrit dans la commission \( q \) du cours \( m \). Les inégalités suivantes garantissent que la combinaison est faisable. De manière similaire au cas précédent, nous supposons que \( Lec_q, Ex_q \) et \( Lab_q \) sont des ensembles non vides :

31. \(2rc_{tpl} \leq w_t + w_p + w_l \quad \forall t \in Lec_q, \forall p \in Ex_q, \forall l \in Lab_q, \forall q \in Q_m\)
32. \(\sum_{p \in Ex_q, l \in Lab_q} rc_{tpl} \geq 1 \quad \forall t \in Lec_q, \forall q \in Q_m\)
33. \(\sum_{t \in Lec_q, l \in Lab_q} rc_{tpl} \geq 1 \quad \forall p \in Ex_q, \forall q \in Q_m\)
34. \(\sum_{t \in Lec_q, p \in Ex_q} rc_{tpl} \geq 1 \quad \forall l \in Lab_q, \forall q \in Q_m\)
35. \(\sum_{v \in V_{t}} y_{tvs} + \sum_{v \in V_{p}} y_{pvs} + \sum_{v \in V_{l}} y_{lvs} \leq 2rc_{tpl} \quad \forall t \in Lec_q, \forall p \in Ex_q, \forall l \in Lab_q, \forall q \in Q_m, \forall s \in Slots_t \cap Slots_p \cap Slots_l\)

Les contraintes (31) établissent que si une classe de conférence est programmée, alors ses classes liées d'exercice pratique et de laboratoire sont également programmées. Les contraintes (32) à (34) imposent que chaque classe doit être liée à au moins une paire de classes des autres types. Les contraintes (35) empêchent les classes liées de se chevaucher dans le même créneau horaire.

Avec ces nouvelles variables et contraintes, nous formulons maintenant le modèle ILP pour la première étape. Puisque l'idée est d'utiliser son résultat comme entrée pour la deuxième étape, en fixant principalement l'affectation des classes aux créneaux horaires, nous considérons une fonction objective alternative : une combinaison pondérée entre maximiser le nombre de classes de conférence assignées et la fonction objective (23) en considérant des poids non négatifs \( \gamma \) et \( \delta \), respectivement. Comme mentionné précédemment, chaque modèle faisable contient une classe de conférence; de plus, les nouvelles inégalités forcent l'affectation des autres types de classes à consister en des modèles faisables pour les étudiants. Nous présentons ci-dessous la formulation, nommée GPECTP-RED. Rappelons que les contraintes et variables impliquant l'affectation des salles sont écartées à ce stade :

GPECTP-RED:

\[
\max \sum_{c \in T} \gamma w_c + \delta \left( \sum_{a \in A} \sum_{m \in M_a} \alpha w_{am} x_{ac} + \beta rk_a x_{ac} \right)
\]

s.t.:

1-10, 15-22, 24-35

restreint à l'ensemble \( \overline{A} \),

\( x_{ac}, x_{sacs}, y_{cvs}, z_{fd}, w_c, rc_{c1c2}, rc_{tpl} \in \{0, 1\} \)

#### 4.3. Étape 2 : Affectation des étudiants aux classes

Étant donné un emploi du temps consistant en l'affectation des classes aux créneaux horaires, la deuxième étape se concentre sur l'obtention d'une solution faisable complète en affectant les étudiants aux cours, ainsi qu'en déterminant quelle salle est réservée pour chaque événement dans une classe. Nous remarquons que ces deux aspects ne sont pas complètement couverts lors de la première étape. En ce qui concerne les étudiants, seul un sous-ensemble réduit est considéré, et l'affectation des classes aux salles est relâchée pour simplifier le problème. Formellement, soit \( \pi = (x^*, x^*_{s}, y^*, z^*, w^*, r^*_{c}, r^*_{c}) \) le vecteur de solution de la première étape représentant l'emploi du temps (faisable) des classes-créneaux horaires. Ensuite, la deuxième étape consiste à formuler le modèle GPECTP-ILP

 et à fixer les variables \( y = y^* \), \( w = w^* \) et \( z = z^* \).

La deuxième étape peut être arrêtée par deux critères différents. Premièrement, nous considérons une limite de temps, spécifiée par l'utilisateur, pour le temps d'exécution à chaque exécution. Deuxièmement, une fois que nous avons au moins un emploi du temps faisable, nous utilisons la borne supérieure fournie par la relaxation LP de la formulation pour arrêter l'optimisation chaque fois qu'elle est pire que la valeur objective de la meilleure solution trouvée. Cela nous permet d'éviter de résoudre des ILP inutiles si la solution actuelle ne peut pas être améliorée.


### 5. Résultats informatiques et description des cas

Afin d'évaluer le comportement de l'algorithme, nous avons mené différentes expériences aux premiers stades du développement en utilisant des instances artificielles générées par le personnel administratif de l'université. De plus, à la fin de 2012, le réglage final et l'évaluation de l'algorithme ont été réalisés en utilisant les informations fournies par les étudiants et le personnel enseignant pour construire l'emploi du temps du premier semestre 2013. Nous rapportons les résultats obtenus pour ce dernier, ainsi que pour les instances correspondant au deuxième semestre 2014 et au premier semestre 2015, nommées respectivement 1-2013, 2-2014 et 1-2015. En effet, nous avons noté que les instances réelles sont beaucoup plus difficiles à résoudre par rapport aux instances artificielles. Les expériences ont été réalisées sur une station de travail équipée d'un processeur Intel(R) Core(TM) i7 (3,40 GHz) et de 16 Go de RAM. Les algorithmes sont codés en C++ en utilisant la bibliothèque CPLEX 12.1 Callable Library comme solveur LP et MIP.

Le tableau 1 présente un résumé des caractéristiques de chaque instance, telles que le nombre d'étudiants (| |( ), le nombre moyen de cours par liste de préférences (av | |M a ), le nombre total de cours (| |4 ) et le nombre correspondant de classes (| |* ). Nous fournissons également le nombre total de créneaux horaires définis pour une semaine (| |), le nombre de professeurs (| |)- et le nombre moyen de créneaux horaires disponibles par professeur (av | |S f ), entre autres paramètres. Enfin, les deux dernières colonnes rapportent le nombre de variables (vars) et de contraintes (const) dans la formulation GPECTP-ILP. Concernant les différents poids impliqués dans l'algorithme, nous avons fixé pour les expériences, sauf indication contraire, α, β, γ et δ à un. Bien que des expériences préliminaires aient été menées avec des valeurs différentes, elles sont principalement considérées pour fournir au planificateur la possibilité de générer différents scénarios pendant le processus.

Concernant les autres paramètres, le classement des étudiants rk a est une valeur comprise entre 1 et 10 fournie par l'université et tous les étudiants attribuent des valeurs de préférence similaires aux cours, relatives à l'ordre dans la liste de préférences. Dans les deux cas, une valeur plus élevée représente un classement et une préférence plus élevés. La configuration du solveur est celle par défaut. Concernant l'algorithme, une limite de temps de 1000 s est imposée à chaque génération de l'affectation initiale des classes aux créneaux horaires (Étape 5 de l'Algorithme 1).

Pour chacune de ces instances réelles, nous avons mené l'expérience suivante pour évaluer l'efficacité et la qualité des solutions générées. Nous avons exécuté l'algorithme en considérant =l 0, 5, 10, 20 et =K 0% (c'est-à-dire, les étudiants affectés aux cours obligatoires), =K 5% et =K 10%. Les résultats sont présentés dans les tableaux 2 à 4. Pour chaque combinaison, nous rapportons le nombre de solutions faisables trouvées Δ(| |), la fonction objective et le nombre d'affectations dans la meilleure solution trouvée, avec leurs écarts d'optimalité correspondants, et le temps total de calcul requis (en secondes).

Pour calculer les écarts, soit zfeas la valeur objective d'une solution faisable et zLP la valeur de la relaxation LP de GPECTP-ILP. Ensuite, l'écart d'optimalité est calculé comme = ( − )⁎ z z z%Gap 100 /LP LPfeas. En ce qui concerne le nombre d'affectations, les écarts sont calculés de manière similaire. La seule différence réside dans le fait que zfeas représente le nombre d'affectations des étudiants aux cours (c'est-à-dire, = ∑ ∑ ∑∈ ∈ ∈(
z xa m M c T acfeas a m ) et z LP est la valeur de la relaxation LP d'une version de GPECTP-ILP qui maximise cet objectif. Cela peut être fait en fixant α = 0, β = 1 et les valeurs de préférence =wc 1ac pour tous ∈ ∈ ∈(a m M c T, ,a m, et en résolvant la LP correspondante.

De plus, chaque fois que la mémoire requise lors de la première étape dépasse la mémoire disponible, aucun résultat n'est rapporté pour cette combinaison de paramètres.

Les résultats obtenus sont conformes aux attentes, où des valeurs plus grandes de K et l produisent généralement de meilleurs résultats. Les résultats correspondants à l'instance 1-2013 montrent que des valeurs petites de l (5,10) génèrent des ensembles réduits ¯A de grande taille, et par conséquent, le modèle GPECTP-RED devient très difficile à résoudre et dépasse la mémoire disponible. Le cas particulier où l=0 ne considère que les étudiants spécifiés en 1 et 2, et donc la première étape peut être résolue dans ce cas. Pour l=20, nous observons les meilleurs résultats, à la fois en termes de fonction objective et de nombre d'affectations. Cela s'explique par le fait que plus d'emplois du temps initiaux sont construits lors de la première étape pour les ensembles réduits d'étudiants considérés comme entrée, et par le fait que chacun de ces problèmes peut être résolu avec la stratégie proposée. En ce qui concerne les valeurs de K, nous notons également une amélioration de la qualité des solutions à mesure que K augmente, mais à un effort de calcul plus élevé. Enfin, nous remarquons que pour K=10%, la première étape ne se termine pour aucune des valeurs de l car elle dépasse la limite de mémoire. Une tendance similaire est observée pour les instances 2-2014 et 1-2015, où des valeurs croissantes de l et K produisent les meilleurs résultats, sauf pour le cas l=0 et K=20 où la solution trouvée est légèrement pire que celle ayant K=5%. Cependant, pour ces deux instances, nous observons que l'heuristique est capable de trouver des solutions pour certaines combinaisons de l et K=10%, car il est possible de résoudre la première étape pour l=0 et l=20. Cette différence peut s'expliquer par le fait que le nombre moyen de créneaux horaires disponibles pour le personnel enseignant est plus grand par rapport à l'instance 1-2013 dans les deux cas, comme montré dans le tableau 1.

Afin d'obtenir une meilleure compréhension du comportement de l'algorithme et de la qualité de l'emploi du temps résultant, nous avons mené une autre expérience en utilisant l'instance 1-2013 pour tester l'impact de l'augmentation du seuil K. Cependant, puisque l'instance est assez contraignante concernant l'ensemble des créneaux horaires faisables pour chaque classe, nous avons décidé de modifier légèrement l'instance en fixant = :S f pour tous ∈ -f , c'est-à-dire que les professeurs n'imposent pas de contraintes pour l'affectation des classes aux créneaux horaires. Nous considérons également l=0 pour les paramètres de configuration, en ne prenant en compte que les étudiants détaillés en 1 et 2, puisque l'impact de la valeur de l a déjà été étudié.

Les résultats sont présentés dans le tableau 5. Pour chaque valeur de K, nous rapportons le temps d'exécution (en secondes) dans l'étape 1. Pour l'étape 2, pour chaque solution faisable dans Δ, nous rapportons sa valeur correspondante en termes de la fonction objective (23) et le nombre d'affectations, tous deux avec leurs écarts correspondants. Nous rapportons également le temps d'exécution total requis pour trouver la solution.

Comme prévu, nous avons observé qu'une augmentation de la valeur de K produit de meilleures solutions finales, bien que le temps de calcul global augmente également. Pour K=0%, l'écart de la solution finale par rapport à la fonction objective (23) est de 7,14 % et le temps d'exécution global est de 2520 s. Pour K=10%, ces valeurs sont de 3,74 % et 7920 s. Il est à noter que la différence dans le temps d'exécution réside principalement dans la première phase, où pour K=0%, elle nécessite 3,33 s et pour K=10%, elle augmente à 5653 s. Cette augmentation des temps d'exécution a également un impact sur le comportement de la deuxième étape. Cela est observé dans le nombre et la qualité des solutions générées, comme le montre la Fig. 2(a). En limitant l'analyse au temps d'exécution de la deuxième étape, des valeurs plus élevées de K impliquent que la procédure est capable de trouver de meilleures solutions en moins de temps. Par exemple, pour K=10%, la procédure trouve une solution avec un écart de 4,07 % en 287 s, tandis que pour K=0%, il faut près de 960 s pour trouver une solution avec un écart de 8,70 %. Ce comportement est clairement justifié par le fait que les affectations générées lors de la première étape tend

ent à être meilleures à mesure que K augmente, au prix d'un temps de calcul plus élevé.

Nous analysons ensuite la qualité de la meilleure solution obtenue pour chaque valeur de K. Pour chaque étudiant ∈ (a , nous considérons sa valeur de satisfaction comme la somme des poids des cours auxquels il/elle est inscrit(e), c'est-à-dire,

\[ sv = \sum_{m \in M_a} w_{am} x_{am} \]

De plus, nous avons considéré une borne supérieure sur cette valeur pour chaque étudiant ∈ (a , \(\overline{sv}\), calculée par la relaxation LP de la formulation obtenue en remplaçant la fonction objective (23) de GPECTP-ILP par (37). Les étudiants ont généralement des listes de préférences de tailles différentes, avec des valeurs de préférence différentes pour chaque cours. Ces deux définitions nous permettent de normaliser la valeur de satisfaction pour chaque étudiant et de comparer le niveau de satisfaction entre eux. Dans la Fig. 2(b), nous rapportons le résumé à cinq nombres en considérant le ratio \(\overline{sv}/sv\) pour tous ∈ (a , classés par leur poids de classement rk a et partitionnés en trois sous-ensembles de taille égale. Nous remarquons que pour les étudiants ayant tous leurs cours marqués comme obligatoires, cette valeur est considérée comme 1.0, et que les trois ensembles sont définis de la même manière pour les trois valeurs de K considérées. D'un point de vue général, nous pouvons observer que le niveau de satisfaction augmente lorsque K est plus élevé, avec des valeurs médianes plus élevées et moins de dispersion des ratios de satisfaction. Cela est cohérent avec les résultats du tableau 5, où les valeurs objectives pour des valeurs plus élevées de K augmentent. De plus, à mesure que K augmente, les valeurs de satisfaction tendent à varier en fonction des classements des étudiants. Par exemple, pour K=10%, la dispersion de chaque groupe tend à être plus grande pour les étudiants de faible rang, tandis que pour K=0%, il n'y a pas de schéma clair. Ce comportement est justifié par la construction des emplois du temps à l'étape une, où l'augmentation de la valeur de K fournit des informations supplémentaires à l'algorithme en incluant les exigences des étudiants qui ne sont pas nécessairement obligatoires.

Nous avons mené deux autres expériences pour fournir des preuves supplémentaires et une meilleure compréhension du comportement de l'approche, principalement en ce qui concerne l'impact de la décision prise pour la construction des emplois du temps lors de la première étape. Rappelons que les emplois du temps générés lors de la première étape sont guidés par l'ensemble réduit d'étudiants dans ¯A. La fonction objective définie dans GPECTP-RED prend partiellement en compte leurs préférences et les cours qu'ils ont sélectionnés. Pour chaque instance, nous considérons trois configurations différentes pour l'algorithme :

- Conf-base : l=0 et K=0, et donc la première étape ne considère que les sujets obligatoires. Ce sont les valeurs rapportées dans les tableaux 2–4, qui sont utilisées comme référence de base.
- Conf-no-prefs : nous prenons la meilleure configuration obtenue pour chaque instance et fixons δ = 0. En conséquence, la fonction objective de GPECTP-RED maximise l'affectation des classes aux créneaux horaires. L'affectation des cours obligatoires et le nombre minimum de cours assignés aux meilleurs K % sont garantis par les contraintes du modèle. Les configurations sont l=20, δ = 0, K=5 % pour l'instance 1-2013 et K=10 % pour les instances 2-2014 et 1-2015.
- Conf-best : la meilleure configuration en termes des résultats dans les tableaux 2, 3 et 4, incluant les préférences des étudiants. La même que Conf-no-prefs mais en fixant δ = 1.

Les résultats obtenus sont montrés dans le tableau 6. Nous observons que les résultats globaux de la meilleure solution trouvée, ainsi que le nombre d'affectations, sont améliorés en incluant les préférences du (ensemble réduit) des étudiants lors de la première étape. En particulier, cela peut être observé en comparant Conf-no-prefs avec Conf-best, puisque la seule différence entre eux est la fonction objective de GPECTP-RED.

En général, de nombreux algorithmes dans la littérature connexe (voir par exemple, [22,10] où les classes sont assignées aux jours de la semaine) proposent une première étape consistant à affecter les classes aux créneaux horaires qui, une fois fixés, sont utilisés comme entrée dans une procédure subséquente pour assigner les salles et les étudiants. Cependant, notre proposition effectue une affectation initiale en utilisant des informations partielles de la deuxième étape, c'est-à-dire en conditionnant l'affectation en utilisant un ensemble réduit d'étudiants (ceux avec des sujets obligatoires plus les K % supérieurs) pour influencer le résultat. De plus, en considérant différents ensembles réduits d'étudiants ¯A, la nature multi-départ de l'approche augmente les chances de trouver de meilleures solutions globales.

Enfin, nous visons à évaluer l'impact des classements des étudiants ainsi que des préférences établies pour les cours dans l'algorithme. Par conséquent, nous avons généré un scénario où la fonction objective ne tient pas compte des classements des étudiants ni de leurs préférences de cours. Les résultats sont montrés dans le tableau 7, où nous rapportons la fonction objective globale et le temps de calcul requis par rapport à la meilleure solution trouvée dans le cas standard. La fonction objective rapportée dans les deux cas considère les préférences et le classement des étudiants. Dans les cas où aucune préférence n'a été sélectionnée, nous calculons ces valeurs en utilisant les informations fournies dans l'instance originale.

Les résultats montrent que la prise en compte des priorités a un impact sur la solution, augmentant la valeur de satisfaction globale d'environ 9 à 10 %. Cela signifie qu'autoriser les étudiants à fournir une liste de préférences avec leurs poids correspondants a un impact positif sur la solution globale et la sélection des étudiants. Néanmoins, les temps de calcul montrent une augmentation sur les trois instances.

Enfin, nous faisons quelques commentaires concernant les résultats du projet au niveau organisationnel. L'algorithme a été implémenté et utilisé pour construire les emplois du temps depuis le premier semestre 2013, et il est toujours utilisé au début de chaque semestre. D'un point de vue organisationnel, la mise en œuvre de cet outil a produit plusieurs avantages. Le processus de construction de l'emploi du temps a été réduit de deux mois à quelques jours seulement, et le planificateur est désormais capable de considérer différents scénarios (par exemple, avec la disponibilité du personnel enseignant) pour sélectionner le meilleur emploi du temps selon leurs besoins. De plus, les étudiants ont désormais une plus grande liberté pour décider comment organiser leur semestre et leur programme d'études, pouvant inclure leurs préférences dans l'affectation des cours. Puisqu'avant cette nouvelle politique l'inscription était obligatoire, les demandes de modifications des affectations au début du semestre ont considérablement diminué, permettant au personnel administratif de se concentrer sur des ajustements plus importants (opérationnels, changements de disponibilité de dernière minute) à l'emploi du temps. En général, la première solution faisable est obtenue après 30 minutes d'exécution, et en moyenne environ 10 solutions sont rapportées après 3 heures. Une exécution complète de l'algorithme prend généralement environ 10 heures, et est généralement exécutée pendant la nuit.


### 6. Conclusions et perspectives d'avenir

Dans cet article, nous avons étudié le Problème Généralisé de Planification de Cours Post-Inscription (GPECTP), un nouveau problème qui généralise deux problèmes connus de la littérature en relation, motivé par une application réelle dans le contexte universitaire. Nous proposons une formulation ILP pour ce problème qui modélise toutes les contraintes liées aux sélections faites par les étudiants ainsi que les contraintes opérationnelles imposées par l'université, et développons une approche heuristique en deux étapes basée sur cette formulation mathématique.

L'heuristique a été testée sur trois instances réelles, obtenant des résultats de bonne qualité qui ont été utilisés en pratique pour planifier le semestre. L'approche est capable de trouver des solutions avec un écart de qualité de 3 à 4 % tout en satisfaisant presque un pourcentage similaire des demandes des étudiants. La solution proposée a été déployée et utilisée pour planifier chaque semestre depuis le premier semestre de 2013.

Pour les recherches futures, nous faisons d'abord quelques remarques sur les extensions possibles de GPECTP-ILP. Certaines d'entre elles ont déjà été intégrées dans la formulation et l'heuristique sans changements majeurs malgré quelques définitions supplémentaires. Ces extensions sont :

- **Ensemble de créneaux horaires faisables pour chaque salle** : Pendant certains créneaux horaires, un sous-ensemble des salles n'est pas disponible car elles sont réservées pour d'autres activités académiques. Cette fonctionnalité a été intégrée dans la formulation en restreignant l'affectation des événements aux salles à certains créneaux horaires particuliers.
- **Nombre de places réservées par classe** : L'université a bloqué un certain nombre de places par classe en cas d'événements imprévus. Il sera donc possible pour l'université de faire des modifications à l'emploi du temps. De plus, ce nombre fixe de places est utile pour les cours de première année dans chaque programme d'études, où la demande pour eux est estimée sur la base de dossiers historiques et des variations dans ces estimations peuvent survenir.

Enfin, en ce qui concerne les aspects informatiques de l'approche, il serait également intéressant de dériver des inégalités valides pour GPECT-ILP, afin d'évaluer si elles peuvent être utilisées en pratique. De plus, certaines d'entre elles peuvent être incluses dans l'heuristique également, et d'autres inégalités peuvent être dérivées pour la formulation considérée dans la première étape, dans le but de réduire le temps de calcul global de l'approche.
