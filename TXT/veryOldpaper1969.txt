The first 5 and perhars most general, attack on
the problem ^as initiated in 1959 - ^ PlU'due University
by J. F. Blakesley ( 3 ), who although handicapped by a.n
extremely primitive computer, produced, a system which
embodied the basic des ign of every subsecuent heur 1 s tic
impleraentatloru The program that he developed follows
the logic
1/each student must be sectioned and the
procedure used should be as fast as possible
2/the last student sectioned should have the sa ire
probability of being assig;ned to a prta.ou 1ar
course section as the first student had.
From this logic two key points emerge. One is that
courses must be ordered according to the difficulty of
finding alterma te sections (single section courses first,
for they have no alternate time schedule, followed by
courses with more and more sections). The second, and
just as important, point re ires that the student be
placed, in the section with the largest number of rema in in
unfilled student places. If this section cannot be
made to fit, then the remaining sections are tried
(from largest to smallest number of remai.iing places)
until a section is found which will fit the schedule 

basic Blakesley model for a computer sectioning proyr-am.
The Flakesley model consists of three major loops,
whi.ch try a 1.1 poss ible combina t ions of courses in a n
attempt to construct a schedule. These loops are :
A/the primary course section assignment loop
*" select the section (of the course under
considera11on) with the largest number of
unfilled student places
- if the selected section does not conflict
with the previously assigned course sections
then proceed on to the next course, otherwise
enter loop B
B/the section progression loop
- this selects the section with the next largest
number of empty student places and returns
to loop A
C/the course backtrack loop
“ this loop is used when all sections of a
course have been tried and found to conflict
with the sections of previously scheduled
courses - the loop backtracks to the last
scheduled course, selects an alternate
non-conf 1 j.cting section as d returns to
loop A to schedule the subsequent courses.
The c'^sic rlan of the ii^sley sec ti i pr n-rsr.,
usually tet :a ed a yo-yo tree search, is cormuon to a 11



lions j 1967 construction of timetables for ontario scholls using computer//introuvable

lewis 1961 the school timetable cambridges univertisties//introuvable
Lawrie N L 1968 school timetabling by computer  aspect of educationnal technology//introuvable
cox  NSM 1969 final report on the reserach prohject into the sconstruction of timetables y automatic computer// introuvable






The data relating to curriculim of pupils and thier organisation into classes and sets is expressed in a number of layouts generally between 4 and 6 6 in total.
the ida of a layout and its use are disscussed by lewis(1961) abd he layout develloped for use with this method of timetabling are ad developement of those in lewi's books.
in essence , the layout is a statement of curriculum and its organisation for a group of pupils, generally a year group, e.g. all the pupuls in the first or other year of the school.
The example of table 1 is a layout for the 3rd year of a comprehensive school with 1060 pupils. There are 260 pupils in the 3rd year.
Colum A of the layout specifies a requirement for 5 classes or stets in Ensligh,  2 in latin and 4 in commerce for 6 periods in the week; collum B specifies a requirement for 4 classes or sets in english , 1 in homecraft , 5 in technical suject , 1 in dress and design, and 1 in 'X' witch stand for a number of miscealnoucous , minority time , sujcets; the entry in the remaining collumns may be interpreted similarly.
On its own, the layout doest not make clear which classes or sets at any time, although this data could be addend beneath the layout, as illustred in Table 1.
It does not specify which teachers of english, latin and commerce will be required in collumn A or which rooms, although this data could be added beneath some or all of the collumns and would not affect the formulation of the problem or require any alteration principe to the computational method.
the advantage to the headmaster of expressing his requirement in the form of layouts have been disscussed fully by the autor (lawrie 1968).
Two point will be made here :

1. A layout simplifies the planning of curriculum and organisation for a group of pupils by providing a compact notation witch emphasis the staff requirements by departements g the plan and omits expicit reference to classes or to how pupils are regrouped into sets from period to period. The notation makes it relatively straightforward to treat a year group as a unit for purposes of curriculum plaling even in lares scgools,and should therefore help to avoid the segregation of into separate streams wich occurs in some schools simply beacause of the difficulty of planning for a large year group as a whole when the unit in wich planning is done is the class.
2. a layout enables a certain amount of detail to be supressed in planning. What is supressed may vary from layout to layout. In table1, classe of sets in a notational departement 'X' appear in several collumns, and the sujects wich are grouped together and labelled 'X' in this instance are the non-examinable subjects ooccupying minority time:
Art
music
physical education
religious education
it may be thought a disadvantage that the timetabler has to produce a layout for the year group as a whole since this transferso him the burden (which apperently might be carried by the computer) of determining not merely curriculum and settings but also the overlap of sets (or classes) in different sujects over the week. If a year group is divided into 'streams' or 'sides' which do not to mix with another for much of the week, the layout is and additional burden and its specificcation fixes the simultaneous occurence of unrelated classes wich could well be left undertemined and at the disposal of a computer program.
On the other hand, if the year group is not divided into 'streams' or 'sides' but is, like the year group in table 1, set over different sub groupsof pupils in different collumnsof the layout, the layout becomes necessary in order to specify the educationnal policy of the school.


Table 2 illustrates five layouts which describe the curricula and organisation of a six-year comprehensive school, labelled school B in Table 5. Notice that plans for years 5 and 6 are run together in one layout and that the layout of Table 1 is identical to the 3rd year layout in Table 2. Much of the detail in years 1 and 2 has been suppressed since most teaching in these years is to mixed ability classes and could have been specified in the layout in a wide variety of ways. Rather than do this it was felt better to defer decisions about the overlapping of such classes in the timetable to a later stage.
What have been specified in the 1st and 2nd year layouts are:
1. the way in which practical classes are organised and, in particular, how two of the periods of Technical/ Homecraft are used by two language pupils for Latin


2. the way in which sets in English and Mathematics are organised. There are enough staff in the school to make possible the simplest arrangement-the simultaneous occurrence of all sets in English or Mathematics in each year.
What goes unspecified is the organisation of the rest of the curriculum which consists of French, History,
309
Geography, Latin (only two of five Latin periods is specified in either layout), as well as the subjects classed as 'X'. This larger group of subjects is classed as 'Y' in the layouts.
Table 3 shows the data of Table 2 prepared for compu- ter input. Each column of each layout gives rise to a line in Table 3 (in effect Johnston and Wolfenden's
Table 2
Layouts for school B (a 6-year school of 1,060 pupils)
1st year layout (150 pupils)
Column:
Periods:
Sets:
A
B
6
6
5E
5M
06255
с
D
E
2
20
4Sc
1H 5Y
2H
IT
2T
4Sc
2Lt
2nd year layout (180 pupils)
Column:
Periods:
Sets:
A6E
B
C
D
E
F
6
4
2
2
20
6E
8M
6Sc
3T
2T
SY
2H
3H
1H
2T
3Sc
3Sc
2Lt
3rd year layout (260 pupils)
Column:
A
Periods:
Sets:
6
SE
4E
2Lt
4C
ST
IDD
CITRO
B6EHTDK
4
4F
1H 5X
ANEX
D
E
F
G
H
I
J
יט
2
7
3
4
4
2
2
6F 6M
4M
3Hi
3Ch
2Bi
2Bi
4X
6X
2G
3Ph
2Ph
2Ph
5T
2EO 2C
2C
2C
2X
4GSc
1A
1A
1A
1C
1Mu
1 Mu
1Mu
1Ge
1Ge
1Ge
1Sp
1Sp
1Sp
3MS
3X
1H
1Hi
4T
2X
4th year layout (260 pupils)
Column:
Periods:
Sets:
A
6
4E 3Lt
3C 2T
BOREK
6
5E
1H
3X 2X
COEHRK
с
6
6F
1H 2X
PMK
D
E
F
G
H
7
3
4
4
4
7M 2M
4Hi
4Ph
6Ch
7X 4G
2Bi
1X
2T
1X
2Ge
2Ge
1Gk
1Gk
1Mu
1 Mu
ΙΑ
1A
3C
3C


Column:
Periods:
Sets:
A
B
6
4
7E 2Hi
2G 1X
0724
с
D
4
F4
E
7M
4Ph 4Ch
2Bi
2Ge
IMS
3X
2Ge 2A
2A
2H 2H
2Mu IC IX
2Mu 1C 3X
IC IX
F6 JULY
2Lt
3T
G6FTAK
H
3
7X
3T




requirement list) which specifies a number of periods and the staff required by department for these periods. At the foot of Table 3, the number of teaching staff in each department is given.
Notice that there are apparent discrepancies between columns X and Y of Table 3 and the sets in 'X' and 'Y' specified in the layouts. For example, column I of the 3rd year layout in Table 2 specifies 3 classes or sets in 'X' and yet line 20 (the corresponding line) of Table 3 specifies 5 teachers required in department X. The explanation is that teachers available to teach the notional subject 'X' come from the departments of Music, Art, Physical Education and Religious Education, and that where some of the subjects taught by these departments occur explicitly in the layout, as they do in
columns H, I and J of the 3rd year layout in Table 2, the number of staff required to teach these subjects is deducted from the number available to teach in depart- ment 'X' (or, equivalently, added to the number of sets in 'X' already specified). The effect of the single classes in each of Music and Art in the columns referred to is included in the appropriate lines of Table 3 (lines 19, 20 and 21) by adding 2 to the staff requirement in depart- ment 'X' for each line. Apparent discrepancies in column Y have the same explanation.
Notice too that the layouts in Tables 1 and 2 are expressed in terms of the subjects taught, whereas Table 3 is expressed in terms of departmental requirements. The link between these two is given in the following para- graphs.
UNTIL
I
I
Table 3
Staff requirements for each line of each layout
EMSTH CLF ZU AXY
2
LIINI
2-1
I
I
1
INT
2
1123 |
232 I
155
12-
2I1
4-
5
2161466876






Other data requirements
The data still requiring to be specified after layouts have been determined consists of:
1. figures of staffing by department;
2. subjects taught by actual and notional departments; 3. agreed codes to be used in presenting input and in printing output.
In school B, staffing and subjects taught by depart- ments were as follows:
Modern Studies, History, Geography, Y
Music, X, Y
Modern Studies
8
Music
3
4
Art, X, Y
Physical Education
4
PE, X, Y
Religious Education
1 RE, X, Y
Art
Notice that the number of teachers available to teach the notional subject 'X' is 12, and the number available to teach the notional subject 'Y' is 32.
The following single letter codes are used to label departments in Table 3 and in Table 4 which is an 'outline timetable' (defined in the next section) for school B, based on the layouts of Table 2.
E: English
H: Homecraft Z: Modern Studies M: Mathematics C: Commerce U: Music
DEPARTMENT
NUMBER OF STAFF
SUBJECTS TAUGHT
English
9
English
Mathematics
9
Mathematics
Science
9
General Science, Physics,
Chemistry, Biology
S: Science
L: Classics
Technical
6
Technical
T: Technical
F: Modern
Homecraft
4
Homecraft, Dress and
Design
Commerce
4
Commerce, Economic
Organisation
Classics
3
Latin, Greek, Y
Modern Languages
9
French, German, Spanish,
Y
Table 4
A: Art
X: department 'X' Languages Y: department 'Y'.
Mathematical formulation
Once layouts have been obtained, the problem of constructing the timetable is dealt with in two stages.
An outline timetable for the requirements of Table 3
PERIODS
Year 1
2 3
4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
SY 5M 5M 5Y 5Y 4S 4S 5Y 5M 5Y 5Y 5Y 5Y 5M 5Y 5Y 5Y SE SY SY 2T 2T 2H 2H
3S 5Y 5Y 8M 8M 5Y 8M 68 38 5Y 5Y 5Y 5Y 6E 6E 5Y 5Y 5Y 6S 6S
2T
Year 2
1H
2T 3T 2H 3H
2T 2T 2H 2H
2L
2L
2F
4Z
4S 4S 4S 6S 6S 4S 4S 5E 6S 6M 6M 6M 6M 5T 6M 4S 4S 4E 6M 6M 2C 2C 2C 2C 2C 2C 2C 4C 2C 4X 4X 4X 4X 1H 4X 4T 4T 5T 4X 4X SZ SZ SZ 2F 2F 2F 5Z 4Z 4Z IU
IC
1H 1H 2H
4F
2C 2C IX
Year 3
IU IU IA 1A 1A 3X
IU
2X
2F 2F
1A
IU IU
1A 1A
2X 2X
Year 4
7M SE SE 2T 2T 5E 2T 2X 2T 2T 1H 1H 2T IH 1H 1H 6F 6F 1H 6F 3X 3X 2X 2X 3X 2X
2M 5E 6S 6S 6S 6S 7X 2T 3C 3C 3C 3C
8Z
8Z
2T 2T 6S 4E 4E
IX
IX
1H 1H 3C 3C 3C
1H IL IL IL IL 3X 2F 2F 2F 2F
6F 6F IL 3L 3L
2X
2X 2F
IU IU IU IU IA IA IA IA
IU
1A
IX
3T 4S 4S 3T 3T 7M 7E 7M 7X 7E 7E 7E 7E 6S 3T 7M 7M 7M 3T 3T 2H 1C 1C 2H 2H 1X
1X
IC 2H IX IX IX 2H 2H
6F 2F 2F IC IC
Years 5 and 6
1X 2U 2U 2L 2L
2A 2A 3X 3X 1X IX
2F 1C
2U 2L
2A 3X
1X
6F 6F
IX IX







1. The overlapping of layouts with one another in such a way that staffing restrictions are not violated during any period of the week. This results in what is called an 'outline timetable' in what follows and is illustrated for school B in Table 4. 2. The permutation of the outline timetable to meet requirements on distribution of classes and sets in various subjects over the week.
So far, only the first of these stages has been programmed, and the mathematical formulation given below is for this stage only.
We define an arrangement as a set of columns, one from each layout, which does not violate any staffing restriction. For the five layouts of Table 2, for example, column B of layout 1, column F of layout 2, column G of layout 3, column B of layout 4 and column E of layout 5 can be verified as forming an arrangement since the total staff by department to teach the classes or sets specified in these columns is, department by department, less than the teaching staff available. The problem can now be seen as one of finding as many arrangements, not necessarily all different, as there are periods in the week. It has a Linear Programming formulation analogous to the trim problems discussed, for example, by Gilmore
and Gomory (1961). The constraints which must be satisfied by any solution are that each column of each layout must occur the number of times specified for it in its layout.
Formally, we suppose that all possible arrangements are serially numbered, and define for each an integer valued, nonnegative variable, x, as the number of occurrences in the outline timetable of the jth arrange- ment. There are thus as many variables as arrange- ments, N say, and as many constraints, m say, as the total number of columns in the layouts of the problem (37 in the case of the problem of Table 2).
We suppose the columns of the layouts numbered consecutively from 1 (column A of layout 1) upwards to m as in Table 3, and define
b;= the number of occurrences of column i specified in its layout.
i = 1, 2,..., m.
a1 = 1 if column i appears in arrangement j O otherwise.
i = 1, 2,..., m.
j- 1, 2,..., N.
Table 4 continued
PERIODS
24 21 22 23
25
26
27
28
28 29 30
31 32 33 34
35
36
37
39 38
40
Year 1
SE SY 5Y 5Y SE SE 4S 4S 4S 4S SE 5Y 5Y 5Y 5M SE 5M 4 4S 2T 2T 2T IT
5Y
2H 2H 2H 1H
2T IT 2H 1H
2L
2L
5Y 6E 6E 6E 8M 6S 5Y 5Y 5Y 5Y 5Y 5Y 5Y 8M 3S 8M 6E 5Y 5Y 3S
Year 2
2T 2H
2T
3T
1H
3H
2L
5T 4M 4M 4M 4E 1H 6X 6X 6X 5T
6F SE SE SE
4E ST 4E
4E
SE 4S 4E 5T 5E 6F 6S
IC
2H
5X 4C 4C 4C 2L 2L 2L
ST
IH ST
5T
4C
2C ST 1H 4C 5X 2C
2H
1C 2H 2H
2L
2F 2H 1C 2L
2F
Year 3
4F
IX
IX 4F IX IX
IU IX 4F
4Z
2X
2X
1A
2X
IU
3X
ΙΑ
4E 6S 6S 6S 8Z 3C 3C 3C 3C IX 3L IL IL IL
4E 7M 7M 7M 3C 2X 2X 2X 2X 3L
Year 4
2F 2F 2F
7M 7M 4E 4E 2T 2M 8Z 2M 7M SE 2X 3C 3C 1H 7X IX 7X 2X 2T 2T 3L 3L 6F
2X
SE
1H 1H
3X 3X
IU IU IU
IA IA IA
IX IX IX
Years 5 and 6
5Z 3T 3T 3T 4S 3X 2H 2H 2H IC IC IC IC 2F 2L 2L 2L 2U 3X 3X 3X 2A 1X
7M 3T 3T 3T 5Z 5Z
6S 6S 7X 7E 6S 5Z 7X 48 7M
IX
2H 2H 2H 3X 3X 6F 6F 6F IX IX IX
IC IC
IC 3X
IC IX
2F 2F
2F
2F
2U 2U
2U
2U
2A
2A
2A
2A
IX IX
IX
IX






The constraints of the problem may now be written in the form:
ax-bi-1,2,..., m.
(1)
The matrix of coefficients (a,,) is by its definition a zero-one matrix and has in general between 85% and 90% zeros. It may be noted that
Σa-1
Is layoutk
since each arrangement contains one and only one column from any layout, and that
iclayoutk
the number of periods in the week, since the layout specifies an activity (column) for each period of the week. Hence
reduces to
Σ
it layout j=1
N
a1jx= ΣΕ
le layoutk
Σ. Χ, Ν
J-1
Thus them constraint equations are not independent. If there are K layouts, K-1 of the equations, one from cach of any K-1 of the layouts, may be omitted.
Although a set of K-1 equations is omitted in the Linear Programming runs, the explanation of details of the computational method assumes that all m equations are present in order to simplify the exposition.
In typical problems the number of variables is large and greatly in excess of the number of equations. Details of 4 recent problems taken from actual schools are given in Table 5.
An objective function
Most frequently, headmasters specify what they regard as a good timetable in terms of the distributions over the week of classes and sets in the various subjects, some- times also in terms of the distribution of free periods for staff or for senior pupils, sometimes in terms of the mix of periods each day-not too many or too few periods daily of 'academic subjects. These imprecisely defined criteria can be seen to be relevant to the second stage of calculation mentioned above, but not to the first stage. At that stage we are interested only in feasible (integer) solutions and hence most recent work has omitted an objective function. It is clear, however, that some outline timetables might lead to better permuted time- tables at the second stage than others, and the aim of the numerical procedures described in the next section has been to produce a number of alternative solutions at stage one.
In earlier work the objective function
maximise Σ cx
was used where c, was defined as the minimum of the b values of the columns in arrangement j and hence is an upper bound for x. This was an attempt to give preference in an outline timetable to arrangements which
could occur to a higher multiplicity, and hence to reduce the number of different arrangements occurring at non zero level in a solution. Such an objective function, however, has little relation to the criteria normally quoted by headmasters and has been dropped in favour of producing a number of alternative (integer) solutions.
The computational method
In the first version of the method, all variables were generated prior to the Linear Programming run which used a code, written in ALGOL for the ICL 1905, incorporating Gomory's Method of Integer Forms (Gomory, 1958) and making use of the objective function mentioned above.
In the current version of the method, variables are generated only as required, no objective function is used, and Gomory's MIF, while still incorporated, is supple- mented by an ad hoc procedure, described below, which first rounds a rational solution to integer values and then completes the partial solution thus obtained using an enumerative procedure. The Method of Integer Forms has been retained along with the ad hoc procedure although no longer strictly necessary. It serves, how- ever, as a means of moving from one feasible solution to an essentially different solution and hence produces different starting points for the ad hoc procedure. The program of this method is also in ALGOL except for a few procedures, one for double length integer arithmetic, written in PLAN. It has solved successfully a number of problems of which those listed in Table 5 are typical.
Schools
Table 5
Data relating to schools studied
Number of pupils Number of staff Pupil : Teacher ratio
Number of layouts Number of lines
Total number of arrangements
Teaching periods available
Teaching periods specified in layouts
Percentage of available teacher periods specified
Computer running times (minutes)
BDG W
1,060 700 980 490 74 45 62 31 14.3 15-6 15-8 15-8
5
5
3
4
37 45 28 48 1,454 1,459
210 2,363
2,960 1,890 2,480 1,395
1,789 1,282 1,208 905
60-4 67-848-7
64.9
2.7 11-9 1-3 7-0






The inverse matrix of the basis is held in explicit form as a matrix of integers with their common denominator, D, held separately. Variables generated for entry into the basis are numbered in order of their entry and have their coefficients in the constraints of the problem stored in compact form with zeros omitted.
The program consists of a Phase I procedure at the end of which cuts are made, one at a time, unless the solution found at the end of Phase I is in integers. After cach cut there is an immediate return to Phase I in order to restore primal feasibility. Cuts are made until either the program terminates with an integer solution as a result of a cut, or sufficient integer solutions have been obtained by use of the ad hoc procedure which is called prior to each cut.
Generation of variables
In Phase I the simplex multipliers, #1, #2" are available at each iteration and the problem of finding the best variable to enter the basis at the next iteration- taken to be the variable pricing out most negative-is a zero-one Integer Linear Programming problem. We define
y=1 if the arrangement selected involves the ith column = 0 otherwise. i = 1, 2,..., m. The problem then is to
minimise Σ
subject to the constraints
it layoutk
Σκ=1
dyD,
i=1
(2)
k = 1, 2,..., K
(3)
r = 1, 2,..., S
where D, is the number of staff in the rth department, d, is the number of staff in the rth department used in column i, and S is the number of departments in the school. D, and d,, are tabulated for school B in Table 3 (S13).
The method of solution employed for this sub-problem is one of partial enumeration. The constraints k = 1, 2,..., K
Σκ-1
is layoutk
express the condition that only one line from each layout may be selected. Lines in each layout are examined in increasing order of their #, values and an enumerative scheme set up capable of examining all possible combina- tions of lines, one from each layout. In the case of the problem of Table 3 where there are 5 lines in the 1st lay- out, 6 in the 2nd, and 10, 8, 8 lines respectively in the 3rd, 4th and 5th layouts, complete enumeration would involve the examination of 5 x 6 x 10 x 8 x8 = 19,200 combinations of y, values. However, only combinations -arrangements-which satisfy constraints (3) are enu- merated. In addition, the value of
Σwy;= ", say
is calculated for the first arrangement found, and the constraint
Σπιν, <π
is then added to the constraints (3) so that branches with a lower bound> need not be examined. This con- straint is successively sharpened if further arrangements are found with smaller values of #, until the arrangement minimising (2) has been found.
After Phase I has been completed and the first cut has been made, the problem of generating variables to enter the basis is more complex. It has the same form as during Phase I (with additional, nonlinear terms in the objective function) and may be solved in the same way. It has not been programmed and is not discussed further here. In the present version of the method only those variables already generated by the end of Phase I are used during the derivation of cuts and the re-entries to Phase I required.
The ad hoc procedure
This procedure may be used following a rounding procedure to obtain one or more solutions in integers from any non negative, non integer basic solution. It has been developed because the use of the Method of Integer Forms on its own did not lead readily to an integer solution. Runs made on the larger problems (e.g. schools B, D and W) were allowed to continue until several cuts had been made and until a considerable time had elapsed without reaching an integer solution. The same experience was repeated when one of these problems was run using two commercially available ILP codes. For these runs all the variables of the problem were generated prior to using the codes.
The usefulness of the procedure depends on the fact that the coefficients of the constraint equations are all non negative and that, if values of certain variables are fixed in such a way that one of the equations is satisfied, the value of all remaining variables in that equation must be zero.
It has one parameter, q, in the control of the user. q is the number of arrangements to be found by the ad hoc procedure. Alternatively, since the sum of the basic variables is N,, the number of periods in the week, the rounding procedure must round basic variables to integer values until the sum of the rounded variables equals N, 9. Typically, q has been set to 4, 5 or 6.
Suppose that the variables of some non integer basic solution are x1, X2, X The rounding procedure rounds down these values to the nearest integer, int[x], i = 1, 2,..., m, and terminates if int [x]> N, -q.
Σ
Otherwise fractional parts are examined in decreasing order of magnitude and the corresponding variable values increased by I until the sum of these rounded values equals N, -q.
Denote by the vector of right-hand sides which is obtained when the rounded variable values are substi- tuted in the basic equations (1) of the problem. b* is compared with b, the vector of true right-hand sides. If bb, for any i, the partial solution obtained by rounding cannot be completed by adding non negative variables and the ad hoc procedure is not entered. If however bb, for all i, the partial solution may be completable by adding non negative integer variables and the ad hoc procedure is entered. Constraints for which bb, may be dropped from consideration as may all






variables which have non zero coefficients in such constraints.
The problem remaining is to find integer solutions to the equations
ax-b-b
The number of constraints with non zero right-hand sides is generally about half the number in the original problem (for q4, 5, 6); the number of variables which can occur at non zero level is greatly reduced; and instead of requiring to find a solution involving N, arrangements (or variables) only 9 arrangements have to be found.
This problem can be tackled readily using an enumera- tive or branching procedure similar in its logic to the procedure for generating arrangements. This is the ad hoc procedure which forms part of the present pro- gram. It is worth noting that in generating arrange- ments the variables branched on are the y. In the ad hoc procedure the variables branched on are the x,, i.e. arrangements themselves. It should be noted too that there are no bounds to calculate in the ad hoc procedure since there is no objective function associated with the constraints. A particular branch may only be ignored if it can be shown there are no feasible solutions along it. As in the main program x, variables are generated as required.
Results
During the summer of 1968, timetabling problems were examined in detail in four six year, comprehensive schools listed in Table 5. Layouts were prepared in conjunction with the headmasters of the schools (one set of layouts, for school B, is shown in Table 2), and one or more outline timetables was constructed for each school using the program already described.
In two cases, the layouts prepared in the first instance gave rise to the result 'no feasible solutions' at the end of Phase I of the program, and this led in one case (school D) to alterations and corrections to the layouts, and in the other (school W), where an attempt was being made to devise a curriculum and form of organisation for the school using substantially fewer teachers than at present, to small increases in the number of staff specified as being available. Layouts were prepared as shown
below.
an outline timetable had been formed. In school G, the first year is taught largely in mixed ability groups which it was felt could be fitted in in a variety of ways, against a specified outline timetable. The same reason (teaching in mixed ability groups) led to the simplification of layouts for years 1 and 2 in school B.
It is worth noting that the size of computing problem which arises in finding an outline timetable for a school depends more on the complexity of curriculum and organisation in the school than on its size. This shows. clearly in Table 5 where the smallest school, W, requires more lines to express its requirements in years 1-4 than does school B for its entire 6 years. Running times in Table 5 exclude times spent in the ad hoc procedure.
All the schools studied had a relatively low pupil teacher ratio but were not simpler to deal with for this reason, since schools with a good staffing position tend to commit their staff to as much teaching (to smaller classes) as schools which are less well staffed.
The ad hoc procedure has been used extensively on a limited number of problems and the results of certain tests are tabulated in Table 6. Machine running times are very variable, but half of the 42 completed runs took 10 seconds or less. Runs were terminated after 10 solu- tions had been found, after all solutions had been found if the number of solutions was less than 10, or after it had been shown that no solutions existed.
Some running times were long, but, since most entries to the procedure produced several solutions quickly, there seems a case for setting an upper limit, say 20 seconds, to the running time of the procedure and returning to the main program after that time if no solutions have been obtained. Running times decrease as q decreases but the number of solutions decreases also. A good value for q would seem to be 3 or 4 if the rounding procedure were modified (as it could be readily) to ensure that it invariably produced a partial solution for which b* < b.
Table 6
Results of using the ad hoc procedure
RUNNING TIME (1)
< 10
SECS
10 < < 20 SECS
> 20 SECS
UNKNOWN
NO OF CASES
22
9
7
4
q=3
4
SCHOOL
B
D
G
W
5
YEAR
1
LI
LI
omitted
LI
344544
3*
15112
3
2
L2
L2
LI
L2
3
L3
L3
L2
L3
4
L4
L4
L4
5
L5
L3
omitted
6
omitted
The reasons for omitting certain years from the study were partly educational and partly to simplify the subsequent computing problem. For example, in school D, only 40 pupils were involved in year 6 and it was felt that their requirements could best be met after
• One run in each of these categories gave rise to no solutions.
Acknowledgements
The author is grateful to the Scottish Council for Research in Education for a grant in support of this work, to the headmasters of the schools co-operating in the study, and to Miss S. J. Turner for assistance in the collection of data and in computer programming.

