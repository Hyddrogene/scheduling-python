### Résumé

Dans les bâtiments universitaires avec de nombreuses salles réparties sur différents étages, les flux importants d'étudiants entre deux cours consécutifs peuvent causer des problèmes de congestion. Ces congestions entraînent de longues files d'attente aux ascenseurs ou aux escaliers, ce qui peut retarder le début des cours. L'emploi du temps des cours a clairement un impact important sur ces congestions. Cet article présente une approche de programmation linéaire en deux étapes pour élaborer un emploi du temps universitaire visant à minimiser les flux d'étudiants. La première étape minimise la violation des préférences des enseignants et des exigences pédagogiques en attribuant les cours à des créneaux horaires et à des salles. La seconde étape réattribue les salles aux cours de l'emploi du temps de la première étape et minimise le flux d'étudiants. Le modèle conceptuel est appliqué aux données de la Faculté d'Économie et de Gestion du campus de Bruxelles de la KU Leuven et est testé et validé avec 21 instances adaptées de la littérature. Contrairement à un modèle monolithique, le modèle en deux étapes parvient systématiquement à trouver des solutions faisables de bonne qualité. De plus, les emplois du temps générés entraînent des flux d'étudiants considérablement réduits par rapport aux flux de l'emploi du temps développé manuellement.

### 1. Introduction

L'augmentation du nombre d'étudiants dans les collèges et universités a entraîné une complexité accrue en termes de planification et d'organisation. Une des tâches devenant de plus en plus complexe est l'élaboration des emplois du temps des cours. Daskalaki, Birbas et Housos (2004) définissent les problèmes de planification des cours universitaires (UCTP) comme la construction d'un emploi du temps hebdomadaire dans lequel toutes les règles opérationnelles et exigences de l'institution académique sont respectées et autant de souhaits que possible du personnel et des étudiants sont satisfaits. Selon Carter et Laporte (1998), l'UCTP peut être formulé comme un problème d'affectation multidimensionnel. Les étudiants et les enseignants doivent être affectés aux cours qui sont à leur tour attribués à des salles et des créneaux horaires de manière à ce qu'il n'y ait pas de chevauchement. Les emplois du temps doivent satisfaire diverses exigences des différentes parties prenantes, notamment l'absence de chevauchement des cours, les heures libres, les préférences des enseignants, les préférences des étudiants, etc. De plus, l'emploi du temps des cours peut avoir un impact énorme sur les files d'attente dans les halls d'escalier et les ascenseurs, en particulier pour les universités ou collèges ayant de nombreux étudiants suivant des cours dans un seul bâtiment. Les problèmes de congestion dans les halls d'escalier et les ascenseurs sont causés par les étudiants en déplacement qui doivent tous changer de salle en même temps entre deux cours consécutifs. Il est évident que les flux d'étudiants peuvent être contrôlés et surveillés via les emplois du temps. Par exemple, si les horaires sont organisés de manière à ce que les leçons consécutives aient lieu dans des salles situées au même étage (ou sur un étage aussi proche que possible), il y aura beaucoup moins de files d'attente aux ascenseurs et dans les escaliers. Ainsi, en plus des diverses contraintes et préférences des différentes parties prenantes, les flux d'étudiants résultants doivent également être pris en compte lors de l'élaboration de l'emploi du temps des cours.

Cette recherche a été motivée par l'UCTP à la Faculté d'Économie et de Gestion (FEB) du campus de Bruxelles de la KU Leuven. Comme décrit par Mercy (2012), le campus FEB de Bruxelles a traversé un processus de consolidation de campus dans lequel plusieurs bâtiments à différents endroits de Bruxelles ont été vendus et les cours de tous les programmes économiques ont été concentrés en un seul endroit dans le centre de Bruxelles. En conséquence, plus de 8000 étudiants suivent quotidiennement des cours dans un seul bâtiment, ce qui provoque inévitablement de graves problèmes de congestion aux ascenseurs et aux escaliers pendant les transitions de cours. Cette congestion est déjà atténuée en attribuant des heures de début différentes pour les programmes académiques et professionnels. Cependant, de longs temps d'attente et des passages difficiles continuent d'exister. Les flux d'étudiants pourraient également être minimisés en répartissant au maximum les cours sur la journée et la semaine. Cependant, les étudiants et les enseignants sont souvent mécontents d'un emploi du temps avec des périodes libres entre les cours. Ne pas pouvoir assister ou donner des cours consécutivement nécessite plus de temps pour se rendre et quitter les salles de classe. Les étudiants qui font la navette préfèrent particulièrement avoir un emploi du temps compact plutôt que de disposer de temps libre entre les cours. En particulier, les jours avec un seul cours programmé doivent être évités.

Malgré la grande complexité de la création des UCTP, de nombreux établissements éducatifs élaborent encore leurs UCTP manuellement, ce qui nécessite beaucoup de temps et de créativité de la part des planificateurs. Il est presque impossible pour les planificateurs humains de résoudre l'énorme puzzle en tenant compte des contraintes et des préférences de toutes les parties prenantes, sans parler d'intégrer les flux d'étudiants résultants. Après avoir montré qu'un modèle de programmation linéaire en nombres entiers (IP) monolithique est intractable pour un solveur commercial de pointe pour résoudre les UCTP réels en tenant compte des flux d'étudiants, cet article présente une approche IP en deux étapes. Dans la première étape, les cours sont attribués à des créneaux horaires en tenant compte des différentes contraintes et en maximisant les préférences des parties prenantes. La deuxième étape utilise l'emploi du temps de la première étape comme entrée et réattribue les salles de classe dans le but de minimiser les flux d'étudiants résultants. Grâce à des tests de calcul approfondis, nous montrons que, contrairement à un IP monolithique, cette approche IP en deux étapes est capable de trouver des solutions de bonne qualité avec des flux d'étudiants minimisés pour les UCTP réels.

Le reste de cet article est organisé comme suit : la section 2 traite de la littérature liée aux différents problèmes de planification, aux techniques de modélisation et de résolution. La section 3 présente le problème de planification du campus de Bruxelles de la KU Leuven. Ensuite, une formulation mathématique du problème est discutée dans la section 4, suivie d'une discussion sur la méthode de solution utilisée dans la section 5. La section 6 applique ensuite le modèle aux données de la Faculté d'Économie et de Gestion du campus de Bruxelles de la KU Leuven. Cette section rapporte également les résultats des tests utilisant des données disponibles dans la littérature. La section 7 conclut cet article et énumère les directions pour les recherches futures.

### 2. Revue de la littérature

Dans les sections suivantes, nous donnons d'abord un aperçu des techniques de solution qui ont été développées dans la littérature. Ensuite, nous examinons la question des emplois du temps compacts, où les heures libres entre les cours consécutifs sont évitées autant que possible, car cela est préféré par la plupart des étudiants et du personnel. Dans la troisième section, nous discutons de la littérature sur l'incorporation des flux d'étudiants dans le problème de planification des cours. Dans la dernière section, nous décrivons l'approche adoptée dans cet article.

#### 2.1. Techniques de solution

Diverses méthodes ont été proposées pour automatiser l'élaboration des emplois du temps des cours (Chiarandini, Socha, Biarattari, & Rossi-Doria, 2006). Des aperçus ont été donnés par Babaei, Karimpour et Hadidi (2015); Burke et Petrovic (2002); Carter et Laporte (1996; 1998); Lewis (2008); MirHassani et Habibi (2013); Petrovic et Burke (2004); Schaerf (1999). Ci-dessous, nous discutons plus en détail de trois approches les plus largement utilisées pour la planification des cours, à savoir la coloration de graphes, les approches métaheuristiques et la programmation mathématique. D'autres approches de solution incluent la programmation logique par contraintes (par exemple, Guéret, Jussien, Boizumault, & Prins, 1996), le raisonnement à base de cas (par exemple, Burke, MacCarthy, Petrovic, et Qu, 2006a et Burke, Petrovic, et Qu, 2006b), et les réseaux de neurones (par exemple, Carrasco & Pato, 2004).

Les approches de coloration de graphes sont souvent utilisées pour la planification des cours grâce à leur facilité de mise en œuvre (Petrovic & Burke, 2004). Dans les approches de coloration de graphes, le problème de planification est modélisé comme un graphe dans lequel les nœuds correspondent aux événements (cours) et les arcs correspondent aux contraintes de conflit d'événements (De Causmaecker, Demeester, & Vanden Berghe, 2009). Ensuite, chaque nœud doit être affecté à une couleur, qui représente un créneau horaire, de sorte que les nœuds connectés aient une couleur différente. L'objectif est de trouver une solution dans laquelle le nombre de couleurs utilisées ne dépasse pas le nombre de créneaux horaires disponibles (Lewis, 2008).

Les métaheuristiques commencent par une ou plusieurs solutions qui sont améliorées de manière itérative en utilisant des opérateurs de recherche locale avec un mécanisme de protection qui évite de rester bloqué dans un optimum local. Des exemples récents d'approches métaheuristiques appliquées aux UCTP peuvent être trouvés dans Aladag, Hocaoglu, et Basaran (2009); De Causmaecker et al. (2009); Lü et Hao (2010); Zhang, Liu, M’Hallah, et Leung (2010) et Geiger (2012). Une hyperheuristique est un cadre dans lequel une métaheuristique de haut niveau sélectionne l'heuristique la plus appropriée parmi un ensemble d'heuristiques de bas niveau pour résoudre un problème d'optimisation particulier (Petrovic & Burke, 2004). Les hyperheuristiques sont un sujet de recherche en croissance pour aborder les problèmes de planification des cours (Burke & Petrovic, 2002). Les approches hybrides combinent différentes techniques, par exemple (Bellio, Di Gaspero, & Schaerf, 2012) présentent une approche de recherche locale hybride, tandis que Gunawan et Kien Ming (2012) proposent une approche hybride qui combine la relaxation lagrangienne et le recuit simulé.

Par le passé, en raison des difficultés de calcul, l'utilisation de la programmation mathématique pour résoudre les UCTP était limitée à des instances de petite taille. Cependant, grâce aux avancées importantes dans les logiciels et matériels informatiques, et dans les formulations IP, les approches de programmation mathématique pour les problèmes de planification des cours sont devenues plus populaires (Daskalaki et al., 2004; Wren, 1996). Des exemples de formulations IP pour les UCTP peuvent être trouvés dans Daskalaki et al. (2004); Dimopoulou et Miliotis (2001); Phillips, Waterer, Ehrgott, et Ryan (2015) et Schimmelpfeng et Helber (2007). Un avantage des approches de programmation mathématique est la facilité d'incorporation de contraintes souples supplémentaires (Carter & Laporte, 1998).

Malheureusement, les UCTP continuent de poser des problèmes pour les départements de planification des universités et des collèges, car les implémentations des techniques de solution proposées sont rares. Selon McCollum (2007), cela est dû à des données incomplètes et à la difficulté d'incorporer des connaissances implicites sur les préférences des enseignants et les politiques de planification. Il existe quelques exceptions notables. Daskalaki et al. (2004) appliquent un modèle de programmation linéaire en nombres entiers au problème de planification du département de Génie électrique et informatique de l'Université de Patras. De Causmaecker et al. (2009) utilisent une approche métaheuristique décomposée pour résoudre le problème de planification de l'école d'ingénieurs KaHo Sint-Lieven. Dimopoulou et Miliotis (2001) rapportent sur la mise en œuvre d'un système informatique pour l'élaboration conjointe d'un emploi du temps des cours et des examens à l'Université d'économie et de commerce d'Athènes. Schimmelpfeng et Helber (2007) décrivent la mise en œuvre d'une approche de programmation linéaire en nombres entiers pour créer un emploi du temps complet de tous les cours pour un trimestre à l'école d'économie et de gestion de l'université de Hanovre. Badri (1996) développe un modèle d'optimisation en deux étapes pour résoudre un problème de planification des cours et des horaires du corps professoral à l'Université des Émirats Arabes Unis. Enfin, Al-Yakoob et Sherali (2007) et Al-Yakoob, Sherali, et Al-Jazzaf (2010) utilisent la programmation linéaire en nombres entiers pour obtenir, respectivement, un emploi du temps des cours et des examens à l'Université du Koweït.

Comme le montre cet article, les difficultés computationnelles inhérentes aux modèles IP énormes peuvent être surmontées en décomposant le problème en étapes distinctes qui peuvent être résolues efficacement avec des solveurs IP de pointe. Badri (1996) utilise également un modèle de planification multi-objectif en deux étapes pour l'affectation des membres du corps professoral aux cours et aux créneaux horaires. Quatre types de préférences, chacun avec une priorité associée, sont regroupés en une fonction objective : l'exigence de charge pour chaque membre du corps professoral, la satisfaction du nombre de salles disponibles, le nombre de cours du soir et les préférences personnelles des enseignants en ce qui concerne les affectations de cours et d'horaires. Les résultats de la première étape, les affectations de cours des enseignants, sont les entrées de la seconde étape. La deuxième étape attribue les enseignants aux créneaux horaires. Burke, Marecek, Parkes, et Rudová (2010) proposent un cadre général pour la décomposition de grands problèmes en plusieurs sous-modèles restreints, qui ne considèrent qu'un sous-ensemble des objectifs au départ. Les solutions aux sous-problèmes sont ensuite agrégées pour obtenir des solutions faisables au problème original. Un avantage de leur méthode est qu'elle est facilement mise en œuvre en utilisant un solveur IP général et fournit des limites sur la qualité de la solution.

#### 2.2. Emplois du temps compacts

Les étudiants et les enseignants préfèrent souvent des emplois du temps compacts. Un emploi du temps compact se réfère à l'absence de périodes libres entre les cours consécutifs. Ci-dessous, nous décrivons trois contributions qui se concentrent également sur les emplois du temps compacts. Santos, Uchoa, Ochi, et Maculan (2012) incluent des contraintes concernant le nombre de périodes libres dans les emplois du temps des enseignants. Une formulation compacte et une formulation étendue sont proposées. Les auteurs utilisent la génération de colonnes et de coupes pour augmenter les bornes duales de la formulation étendue. Dorneles, de Araújo, et Buriol (2014) présentent un modèle de programmation linéaire mixte pour un problème de planification des cours de lycée. Parmi les différentes exigences considérées dans les écoles brésiliennes, deux contraintes de compacité doivent être respectées dans l'emploi du temps d'un enseignant : la minimisation des jours de travail et l'évitement des créneaux horaires vides. Les auteurs proposent une heuristique de fixation et d'optimisation combinée avec une méthode de descente à voisinage variable utilisant trois types de décomposition différents (classe, enseignant et jour). Burke et al. (2010) distinguent quatre termes de pénalité : la capacité de la salle de classe, la répartition des cours, la compacité

 temporelle et la stabilité de la salle de classe. La pénalisation de la capacité et de la stabilité de la salle de classe est respectivement effectuée en pénalisant les salles de classe si un nombre insuffisant de places est disponible et si des salles de classe distinctes sont utilisées pour différents cours. La répartition des cours est pénalisée lorsque la répartition réelle est inférieure à la répartition prescrite. Pour un curriculum donné, chaque fois qu'un cours n'est pas adjacent (un cours isolé) à un autre cours le même jour, la compacité temporelle est pénalisée.

#### 2.3. Flux d'étudiants

Comme mentionné précédemment, la motivation de cet article est la congestion qui se produit dans les couloirs et les escaliers à la Faculté d'Économie et de Gestion du campus de Bruxelles de la KU Leuven et l'observation que l'emploi du temps a un impact sur cette congestion. Par conséquent, nous discutons des travaux précédents qui intègrent les déplacements des étudiants entre les cours consécutifs dans le problème de planification des cours. À notre connaissance, les études d'Al-Yakoob et Sherali (2007); Al-Yakoob et al. (2010); Ferdoushi, Das, et Akhand (2014); Hertz (1991); Pongcharoen, Promtet, Yenradee, et Hicks (2008), et Rudová, Müller, et Murray (2011) sont les seules qui, à un degré limité, intègrent les flux d'étudiants. Al-Yakoob et Sherali (2007) présentent un modèle de programmation linéaire mixte pour les problèmes de planification des cours et considèrent un sujet de congestion connexe. Les auteurs abordent le problème des congestions de stationnement et de trafic pour les étudiants et les enseignants lorsque les cours sont inadéquatement répartis sur tous les créneaux horaires disponibles. Les étudiants et les enseignants sont adéquatement répartis sur tous les créneaux horaires disponibles grâce à des contraintes qui imposent une limite supérieure au nombre d'étudiants qui suivent des cours (passent des examens) pendant chaque créneau horaire. Ces limites ne sont pas nécessairement les mêmes pour différents créneaux horaires. Par exemple, les créneaux horaires lorsque les employés et le personnel commencent et finissent de travailler peuvent avoir une limite supérieure plus petite. Les flux d'étudiants sont également pris en compte par Al-Yakoob et al. (2010). Les auteurs présentent un modèle de programmation linéaire mixte pour la planification des examens et abordent les mêmes sujets : les congestions de stationnement et de trafic et une répartition inadéquate des examens. Par conséquent, programmer des examens consécutifs dans des campus éloignés est indésirable. Les congestions de stationnement et de trafic sont abordées en imposant une contrainte sur le nombre d'étudiants pouvant être impliqués dans une période d'examen. Pongcharoen et al. (2008) présentent un modèle d'optimisation stochastique pour l'UCTP. Ils s'attaquent au problème des déplacements des étudiants par une contrainte souple garantissant que les étudiants assistent aux cours dans la même salle autant que possible. Plus récemment, Ferdoushi et al. (2014) considèrent également la minimisation des déplacements des étudiants entre les salles par des contraintes souples. Les auteurs développent une approche d'optimisation hybride modifiée par essaims de particules pour un environnement hautement contraint et réaliste dans le département d'informatique et d'ingénierie de l'Université de Khulna pour l'ingénierie et la technologie, au Bangladesh. Dans les deux articles, les distances entre les salles de classe ne sont pas prises en compte. Hertz (1991) utilise la recherche tabou et la théorie des graphes pour résoudre les problèmes de planification. En plus des contraintes de faisabilité classiques de l'emploi du temps, les exigences de précédence et les contraintes géographiques sont prises en compte. Les exigences de précédence sont, par exemple, des cours qui doivent être suivis de sessions d'exercices le même jour. Les contraintes géographiques sont liées à la distance de deux salles de classe de deux cours consécutifs. La fonction objective pénalise les emplois du temps infaisables et les paires de cours consécutifs dans des salles de classe éloignées. Rudová et al. (2011) utilisent une recherche itérative générique et un algorithme de branchement et de bornes pour un problème complexe de planification universitaire. Ils développent une méthode générique qui n'est pas spécifiquement adaptée à un seul type de problème afin qu'elle puisse être utilisée en pratique pour résoudre différents problèmes de planification réels avec différentes contraintes. Les auteurs considèrent également les distances entre les salles et pénalisent les affectations de cours qui nécessitent que les étudiants ou les enseignants parcourent de longues distances entre les cours consécutifs.

#### 2.4. Aperçu de l'article actuel

L'approche présentée dans cet article vise à développer des emplois du temps compacts pour lesquels les flux d'étudiants résultants sont minimisés afin d'éviter les congestions dans les couloirs et les escaliers. Pour atteindre le premier objectif, les périodes libres de deux heures sont évitées par une contrainte stricte. Pour atteindre le second objectif, le flux d'étudiants entre les cours consécutifs est modélisé en détail en utilisant un graphe qui représente le bâtiment de la faculté, où le flux à travers chaque arc et les temps de trajet résultants sont optimisés en changeant l'affectation des cours aux salles.

Notre méthode sera testée sur un cas réel ainsi que sur des instances disponibles dans la littérature. Les compétitions internationales de planification (ITC) fournissent régulièrement un certain nombre de problèmes de référence largement utilisés dans la littérature sur la planification pour développer des expériences de calcul. Badoni, Gupta, et Mishra (2014) décrivent un algorithme hybride combinant un algorithme génétique avec une recherche locale utilisant des événements basés sur des groupements d'étudiants pour résoudre un UCTP. Les auteurs ont appliqué leur algorithme sur des instances basées sur les ensembles de données de la première compétition internationale de planification (ITC2002). Hao et Benlic (2011) combinent la recherche tabou et la programmation linéaire pour trouver de nouvelles bornes inférieures pour le problème de planification des cours basé sur le curriculum de l'ITC2007. Phillips et al. (2015) valident leur modèle de programmation linéaire pour résoudre un UCTP à travers un cas réel à l'Université d'Auckland et sur des instances de l'ITC2007. Dorneles et al. (2014) ont utilisé les instances ITC2011 pour tester leur algorithme dédié à un problème de planification des cours de lycée.


### 3. Description du problème

#### 3.1. Le problème de planification à l'université KU Leuven Campus Brussels

Dans le cadre du problème de planification à l'université KU Leuven Campus Brussels, un emploi du temps hebdomadaire doit être établi, où les cours (événements) doivent être attribués à des créneaux horaires et des salles. Deux éléments doivent être pris en compte :

- Les enseignants sont déjà assignés aux cours.
- Une série est un groupe d'étudiants ayant exactement le même emploi du temps. Pour chaque série, le nombre d'étudiants est connu à l'avance ainsi que les cours qu'ils doivent suivre.

Les séries sont divisées en quatre types d'enseignement différents : enseignement de jour, enseignement du matin, enseignement du soir et enseignement du soir uniquement les mardis et jeudis. Le nombre de créneaux horaires disponibles pour une série dépend du type d'enseignement de la série. Ces préférences éducatives (EPF) peuvent être violées en programmant un cours à un créneau horaire où certaines séries d'étudiants ne sont pas disponibles en raison de leur type d'enseignement.

Chaque enseignant peut soumettre ses préférences d'enseignement concernant les créneaux horaires au début de l'année académique. Ces préférences des enseignants (TPF) peuvent être violées en programmant un cours à un créneau horaire où un enseignant ne préfère pas enseigner ce cours. Un premier objectif est donc de minimiser la violation des préférences des enseignants et des préférences éducatives mentionnées ci-dessus.

Un autre aspect à prendre en compte dans l'élaboration de l'emploi du temps pour l'université KU Leuven Campus Brussels est la congestion causée par les étudiants se déplaçant d'une salle de classe à une autre entre deux cours consécutifs. Une conséquence de cette congestion est que les cours commencent souvent en retard car il faut beaucoup de temps aux étudiants pour se rendre dans leur salle de cours suivante. Par conséquent, nous incluons la minimisation du temps de déplacement maximal pour chaque série d'étudiants pour tous les créneaux horaires comme deuxième objectif.

#### 3.2. Intégration des flux d'étudiants

Pour modéliser le flux et les temps de déplacement résultants des étudiants, nous employons certaines techniques de modélisation utilisées dans les modèles d'affectation de trafic. Les modèles d'affectation de trafic essaient de prédire les flux de trafic et la congestion et les temps de déplacement résultants sur chaque route du réseau, étant donné le nombre estimé de personnes souhaitant voyager entre différentes paires origine-destination (Patriksson, 2015). Ils représentent le réseau routier comme un graphe G = (N, A), où l'ensemble N de nœuds représente les destinations ou les intersections et l'ensemble A d'arcs les routes entre elles. De manière analogue, pour modéliser le flux et les temps de déplacement résultants des étudiants, nous représentons la disposition du bâtiment par un graphe dans lequel plusieurs salles de classe adjacentes sont regroupées en un seul nœud. Le nombre de salles de classe regroupées en un nœud est basé sur un compromis entre la complexité du modèle d'une part et son réalisme d'autre part. Ensuite, seuls les nœuds représentant des emplacements physiques adjacents les uns aux autres dans le bâtiment réel sont connectés par un arc, par lequel un « flux » d'étudiants peut passer. Cela implique qu'il est possible que des étudiants voyageant de la salle A à la salle B doivent passer par plusieurs arcs pour atteindre leur destination (par exemple, s'ils doivent passer du 3e au 5e étage, ils doivent d'abord passer par l'arc pour les escaliers entre le 3e et le 4e étage, puis par l'arc pour les escaliers entre le 4e et le 5e étage). De plus, en réalité, il peut y avoir plusieurs routes possibles pour atteindre la même destination à partir d'un emplacement donné. Par conséquent, dans le modèle, une probabilité de choix de route doit être spécifiée pour déterminer le pourcentage d'étudiants qui provoqueront un flux dans chaque arc possible d'une certaine route. La figure 1 donne un exemple de disposition d'un bâtiment et du graphe correspondant pour modéliser les flux d'étudiants.

Un élément important dans l'analyse des modèles d'affectation de trafic est la notion de congestion (Patriksson, 2015). À mesure que le volume de trafic sur un arc augmente, la vitesse moyenne de déplacement sur le lien diminue, jusqu'à atteindre une situation de congestion totale. Le temps de déplacement d'un lien est modélisé avec une fonction de performance de lien, qui relie le temps de déplacement à travers un lien au volume de trafic sur ce lien. Un concept similaire a été observé pour les flux piétonniers. Dans la littérature, cette relation entre la densité de la foule et la vitesse de marche est appelée le « diagramme fondamental », en raison de son importance dans les modèles décrivant le comportement de marche humaine (pour un aperçu général de la recherche sur le comportement de marche des piétons, voir par exemple Helbing et Johansson, 2010 et Kalakou et Moura, 2014). Puisque nous nous intéressons au temps de déplacement des étudiants entre les salles de classe, nous décrirons ce concept plus en détail.

Schadschneider et Seyfried (2009) donnent un aperçu de l'état de la recherche empirique et examinent les données relatives au diagramme fondamental. Leurs données ne considèrent que les installations de marche planes telles que les couloirs et ne s'appliquent pas aux escaliers. Ils observent qu'il y a beaucoup de variance dans les données, ce qui a été attribué à une variété de facteurs. Deuxièmement, il n'y a pas de consensus sur l'existence même de différences significatives entre les flux unidirectionnels et multidirectionnels. Par conséquent, nous ne distinguons pas les flux unidirectionnels et bidirectionnels à travers un arc.

Basé sur les données de Schadschneider et Seyfried (2009), nous supposons la relation suivante entre la densité de la foule ρ, et la vitesse de marche v, c'est-à-dire

\[ v( \rho ) = \frac{\alpha}{\rho} \]

où α est un paramètre de mise à l'échelle. La raison de ce choix est que le temps de déplacement en fonction de la densité de la foule est alors linéaire. Une autre possibilité est bien sûr de supposer une relation linéaire entre la densité de la foule et la vitesse de marche, puis d'ajuster une fonction linéaire par morceaux à la fonction de temps de déplacement non linéaire résultante. Cependant, deux arguments soutiennent notre choix : (i) à des densités de foule élevées, la vitesse de marche ne devient pas réellement nulle, mais des « mouvements turbulents de foule » sont observés (Helbing, Johansson, & Al-Abideen, 2007), et (ii) dans les modèles d'affectation de trafic, il a été observé que les fonctions de temps de déplacement asymptotiques conduisent empiriquement à des temps de déplacement irréalistes (Boyce, Janson, & Eash, 1981). D'autres études empiriques ont examiné le diagramme fondamental pour le mouvement sur les escaliers. Comme prévu, la vitesse de marche est ici inférieure à celle des surfaces planes, voir par exemple Qu, Gao, Xiao, et Li (2014). Par conséquent, nous incluons un terme de correction γ ∈ [0, 1], tel que

\[ v( \rho ) = γ \left(\frac{\alpha}{\rho}\right) \]

Ensuite, le temps de déplacement à travers l'arc (i, j) est la longueur de l'emplacement physique représenté par cet arc divisée par la vitesse de marche des étudiants qui le traversent ; c'est-à-dire, il dépend du flux total d'étudiants traversant l'arc :

\[ T_{arc_{ti j}} ( ρ ) = \frac{length_{ij}}{v( \rho )} = \frac{length_{ij}}{\frac{\alpha}{ρ}} + \frac{length_{ij}}{v_{max}} \]

Le deuxième terme dans l'équation (3) assure un temps de déplacement minimal lorsque la densité est nulle. De plus, la densité de la foule ρ à un moment donné t est égale au nombre d'étudiants qui voyagent à travers l'arc (i, j) à un moment donné t, noté Ftij, divisé par la surface de l'emplacement physique représenté par cet arc, c'est-à-dire

\[ ρ = \frac{Ftij}{areaij} \]

Cette représentation peut également être étendue à une situation où il y a plusieurs bâtiments. Dans ce cas, il suffit de définir un arc entre les entrées de chaque paire de bâtiments et de supposer un temps de déplacement fixe pour cet arc, car dans les espaces publics et les routes, la densité est « donnée » et uniquement influencée de manière marginale par le nombre d'étudiants en déplacement.


### 4. Formulation en programmation linéaire mixte

En nous appuyant sur les explications de la section précédente, nous sommes maintenant en mesure de dériver une formulation en programmation linéaire mixte (PLM) pour notre modèle, visant à minimiser conjointement la violation des préférences des enseignants et des préférences éducatives d'une part, et les temps de déplacement des étudiants d'autre part.

#### 4.1. Notation

**Constantes**

- \(\delta\) : nombre de créneaux horaires disponibles en une journée. Ce nombre est supposé être le même pour chaque jour où les cours peuvent être programmés.

**Ensembles**

- \(c, d \in C\) : salles de classe. Chaque cours nécessite une salle de classe du type correct et avec une capacité suffisante. Différents types de salles de classe, par exemple des salles informatiques et des laboratoires, peuvent exister.
- \(i, j \in N\) : nœuds.
- \(k \in K\) : jours. Ce sont les jours (lundi = 1, ..., vendredi = 5) où les cours peuvent être programmés.
- \(l, m \in L\) : cours. Chaque cours dure deux heures, est unique et est programmé une seule fois. Un cours qui consiste, par exemple, en deux cours est programmé deux fois.
- \(p \in P\) : chemins.
- \(r \in R\) : enseignants.
- \(s \in S\) : séries d'étudiants.
- \(t \in T\) : créneaux horaires disponibles. Ce sont les différentes périodes où un cours peut être programmé.

**Sous-ensembles**

- \(Cl\) : salles de classe pouvant être utilisées pour programmer le cours \(l\).
- \(L_C^c\) : cours pouvant être programmés dans la salle de classe \(c\).
- \(L_R^r\) : cours enseignés par l'enseignant \(r\).
- \(L_S^s\) : cours devant être suivis par la série \(s\).
- \(P_{cd}\) : tous les chemins reliant la salle \(c\) et la salle \(d\).
- \(Tk\) : créneaux horaires du jour \(k\).

**Paramètres**

- \(a_{pcd}\) : pourcentage d'étudiants utilisant le chemin \(p\) pour se rendre de la salle \(c\) à la salle \(d\).
- \(b_{ijp}\) : vaut 1 si l'arc (i, j) est sur le chemin \(p\), 0 sinon.
- \(c_{lt}\) : coût de pénalité pour programmer le cours \(l\) dans le créneau \(t\). Ces coûts incluent à la fois les préférences des enseignants et les préférences éducatives.
- \(n_s\) : nombre d'étudiants dans la série \(s\).

**Variables de décision**

- \(x_{ltc} \in \{0,1\}\) : vaut 1 si le cours \(l\) est programmé à l'heure \(t\) dans la salle \(c\), 0 sinon.
- \(U_{tsp} \in [0,1]\) : pourcentage d'étudiants de la série \(s\) utilisant le chemin \(p\) à l'heure \(t\).
- \(F_{tij} \ge 0\) : flux total d'étudiants traversant l'arc (i, j) à l'heure \(t\).
- \(Tarc_{tij} \ge 0\) : temps de déplacement à travers l'arc (i, j) à l'heure \(t\).
- \(Ttotal_{tsp} \ge 0\) : temps de déplacement total pour les étudiants de la série \(s\) utilisant le chemin \(p\) à l'heure \(t\).
- \(Tmax = \max_{t,s,p} \{T_{tsp}\}\).

#### 4.2. Le modèle

Le premier ensemble de contraintes assure un emploi du temps faisable. Ce sont des contraintes strictes. L'ensemble de contraintes (5) implique que chaque cours doit être programmé dans un créneau horaire et une salle de classe faisables. Les contraintes (6) garantissent que chaque enseignant peut enseigner au plus un cours à un créneau horaire particulier. Ce cours peut être enseigné par cet enseignant et est programmé dans un créneau horaire faisable. L'ensemble de contraintes (7) assure que, pour chaque créneau horaire, au plus un cours faisable peut être programmé dans chaque salle de classe. Une série d'étudiants ne peut assister qu'à un cours à la fois. Cela est impliqué par l'ensemble de contraintes (8).

\[ \forall l \in L : \sum_{t \in T} \sum_{c \in Cl} x_{ltc} = 1 \tag{5} \]

\[ \forall r \in R, \forall t \in T : \sum_{l \in L_R^r} \sum_{c \in Cl} x_{ltc} \le 1 \tag{6} \]

\[ \forall t \in T, \forall c \in C : \sum_{l \in L_C^c} x_{ltc} \le 1 \tag{7} \]

\[ \forall s \in S, \forall t \in T : \sum_{l \in L_S^s} \sum_{c \in Cl} x_{ltc} \le 1 \tag{8} \]

La législation du travail impose également un certain nombre de contraintes concernant les heures de travail des enseignants. La première contrainte est que les enseignants ne peuvent pas enseigner plus de \( \lambda_1 \) cours de deux heures par jour. Les contraintes (9) assurent ces conditions de travail. Ensuite, les enseignants ne sont pas autorisés à enseigner plus de \( \lambda_2 \) cours consécutifs. Cela est imposé par les contraintes (10). Ici, \(Q\) désigne un sous-ensemble de créneaux horaires consécutifs.

\[ \forall r \in R, \forall k \in K : \sum_{l \in L_R^r} \sum_{t \in T_k} \sum_{c \in Cl} x_{ltc} \le \lambda_1 \tag{9} \]

\[ \forall r \in R, \forall k \in K, \forall Q \subset T_k, |Q| = \lambda_2 + 1 : \sum_{l \in L_R^r} \sum_{t \in Q} \sum_{c \in Cl} x_{ltc} \le \lambda_2 \tag{10} \]

De plus, les enseignants ne sont pas autorisés à enseigner au premier créneau horaire s'ils ont enseigné au dernier créneau horaire la veille. L'ensemble de contraintes (11) montre comment cette interdiction est imposée. Enfin, le législateur n'autorise pas qu'un enseignant enseigne au premier et au dernier créneau horaire d'une journée particulière. Cela est impliqué par l'ensemble de contraintes (12).

\[ \forall r \in R, \forall k \in \{1, . . . , |K| - 1\} : \sum_{l \in L_R^r} \sum_{c \in Cl} (x_{l,k\delta,c} + x_{l,k\delta+1,c}) \le 1 \tag{11} \]

\[ \forall r \in R, \forall k \in K : \sum_{l \in L_R^r} \sum_{c \in Cl} (x_{l,1+(k-1)\delta,c} + x_{l,k\delta,c}) \le 1 \tag{12} \]

Les contraintes (13) sont les contraintes de compacité : ces contraintes évitent les périodes libres de deux heures dans les emplois du temps. Si un cours est programmé aux créneaux horaires \(t\) et \(t + 2\) d'une journée particulière, alors un autre cours doit être programmé au créneau horaire \(t + 1\) du même jour.

\[ \forall s \in S, \forall k \in K, \forall t \in \{\delta (k - 1) + 1, . . . , \delta k - 2\} : \sum_{l \in L_S^s} \sum_{c \in Cl} (x_{ltc} + x_{l,t+2,c} - x_{l,t+1,c}) \le 1 \tag{13} \]

Le deuxième ensemble de contraintes détermine les flux d'étudiants. Pour chaque série d'étudiants \(s\), nous devons déterminer quels chemins ils utilisent compte tenu de l'affectation des cours aux salles de classe. À cette fin, \(U_{tsp}\) indique le pourcentage d'étudiants de la série \(s\) utilisant le chemin \(p\) à l'heure \(t\). La relation entre \(x_{ltc}\) et \(U_{tsp}\) est la suivante :

\[ \forall t \in \{1, . . . , |T| - 1}, \forall s \in S, \forall l, m \in L_S^s, \forall p \in

 P, \forall c \in Cl, d \in Cm : U_{tsp} \ge a_{pcd} (x_{ltc} + x_{m,t+1,d} - 1) \tag{14} \]

Cependant, nous devons également inclure le flux causé par les étudiants qui quittent le bâtiment lorsqu'ils n'ont pas cours à l'heure \(t + 1\), et les étudiants qui entrent dans le bâtiment lorsqu'ils n'avaient pas cours à l'heure \(t\). Les deux expressions suivantes incluent respectivement le premier et le deuxième type de flux :

\[ \forall t \in \{1, . . . , |T| - 1}, \forall s \in S, \forall l \in L_S^s, \forall p \in P, \forall c \in Cl : U_{tsp} \ge a_{pc,exit} \left( x_{ltc} - \sum_{m \in L_S^s} \sum_{d \in Cm} x_{m,t+1,d} \right) \tag{15} \]

\[ \forall t \in \{1, . . . , |T| - 1}, \forall s \in S, \forall l \in L_S^s, \forall p \in P, \forall c \in Cl : U_{tsp} \ge a_{pc,exit} \left( x_{l,t+1,c} - \sum_{m \in L_S^s} \sum_{d \in Cm} x_{mtd} \right) \tag{16} \]

Ensuite, le flux à travers chaque arc (i, j) à l'heure \(t\) peut être calculé comme suit :

\[ \forall t \in T, \forall i, j \in N : F_{tij} = \sum_{p \in P} \sum_{s \in S} n_s b_{ijp} U_{tsp} \tag{17} \]

Pour garantir que la densité de la foule ne dépasse pas des niveaux dangereux (voir par exemple Helbing et al., 2007), le flux à travers un arc ne peut pas dépasser un niveau maximal prédéterminé :

\[ \forall t \in T, \forall i, j \in N : F_{tij} \le F_{max} \tag{18} \]

Maintenant, le temps de déplacement à travers l'arc (i, j) à l'heure \(t\) est dérivé du flux comme suit :

\[ \forall t \in T, \forall i, j \in N : Tarc_{tij} = \frac{length_{ij}}{\frac{\alpha}{F_{tij}} + \frac{length_{ij}}{vmax}} \tag{19} \]

où le facteur de correction \(\gamma\) doit être inclus si l'arc (i, j) représente des escaliers. Ensuite, le temps de déplacement d'une série donnée \(s\) de leur première salle de classe \(c\) à leur salle de classe suivante \(d\) est donné par la somme des temps de déplacement individuels de chaque arc (i, j) se trouvant sur le chemin \(p\) utilisé par cette série. Lorsqu'il existe plusieurs chemins que les étudiants peuvent emprunter, le temps de déplacement de la série est pris comme le maximum des temps de déplacement sur tous les chemins possibles. Pour modéliser cela, les deux contraintes suivantes sont ajoutées :

\[ \forall t \in \{1, . . . , |T| - 1}, \forall s \in S, \forall l, m \in L_S^s, \forall c \in Cl, d \in Cm, \forall p \in Pcd : - \sum_{(i, j)} b_{ijp} Tarc_{tij} + Ttotal_{tsp} \le M (2 - x_{ltc} - x_{m,t+1,d}) \tag{20} \]

\[ \sum_{(i, j)} b_{ijp} Tarc_{tij} - Ttotal_{tsp} \le M (2 - x_{ltc} - x_{m,t+1,d}) \tag{21} \]

où \(M\) est un grand nombre. Ces contraintes fonctionnent comme suit : si deux cours consécutifs \(l\) et \(m\), suivis par la série \(s\), sont programmés dans les salles \(c\) et \(d\) respectivement, alors (20) et (21) se réduisent à :

\[ - \sum_{(i, j)} b_{ijp} Tarc_{tij} + Ttotal_{tsp} \le 0 \tag{22} \]

\[ \sum_{(i, j)} b_{ijp} Tarc_{tij} - Ttotal_{tsp} \le 0, \tag{23} \]

ce qui équivaut à \(Ttotal_{tsp} = \sum_{(i, j)} b_{ijp} Tarc_{tij}\). Cela signifie que le temps de déplacement de cette série sur le chemin \(p\) doit être égal à la somme des temps de déplacement individuels de tous les arcs (i, j) se trouvant sur le chemin \(p\). D'un autre côté, si au moins une des variables \(x_{ltc}\) et \(x_{m,t+1,d}\) est égale à 0, alors

\[ - \sum_{(i, j)} b_{ijp} Tarc_{tij} + Ttotal_{tsp} \le M \tag{24} \]

\[ \sum_{(i, j)} b_{ijp} Tarc_{tij} - Ttotal_{tsp} \le M, \tag{25} \]

de sorte que rien n'est impliqué pour \(Ttotal_{tsp}\), c'est-à-dire \(Ttotal_{tsp}\) peut être fixé à 0. De plus, il ne peut y avoir qu'une seule combinaison de \(x_{ltc}\) et \(x_{m,t+1,d}\) pour laquelle les deux variables sont égales à 1, donc \(Ttotal_{tsp}\) est alors défini de manière unique.

Enfin, le temps de déplacement maximal \(Tmax\) est donné par :

\[ \forall t \in T, \forall s \in S, \forall p \in P : Ttotal_{tsp} \le Tmax \tag{26} \]

Nous n'incluons pas les séries qui n'ont pas de cours à l'heure \(t + 1\), car elles quittent le bâtiment et, par conséquent, n'ont pas besoin d'arriver à leur prochain cours aussi rapidement que possible. De même, nous n'incluons pas les séries qui n'ont pas de cours à l'heure \(t\), car elles entrent dans le bâtiment depuis l'extérieur, donc elles entrent naturellement par vagues au lieu de toutes en même temps ; de plus, elles peuvent arriver plus tôt pour être en classe à l'heure. Nous remarquons également que deux créneaux horaires consécutifs pour lesquels il y a une pause déjeuner entre eux ou qui sont sur deux jours consécutifs ne devraient évidemment pas être inclus.

La fonction objective comprend donc deux parties : la minimisation de la violation des préférences des enseignants et des préférences éducatives d'une part, et la minimisation du temps de déplacement maximal d'autre part.

\[ minimize \quad \lambda \sum_{l \in L} \sum_{t \in T} \sum_{c \in C} c_{lt} x_{ltc} + (1 - \lambda) Tmax \tag{27} \]

Le poids de \(\lambda \in [0, 1]\) reflète l'importance de chacun des termes respectifs dans la fonction objective. Ce paramètre doit être défini par l'université en fonction de l'importance relative qu'elle accorde à chaque terme.


### 5. Approche de la solution

Nous avons essayé de résoudre le modèle mathématique présenté dans la section 4 directement en utilisant un solveur de programmation en nombres entiers. Cependant, les contraintes de type "Big M" rendent la formulation du problème inabordable pour des instances réelles. Par conséquent, nous utilisons une approche en deux étapes de programmation en nombres entiers, qui est une adaptation de la méthode de décomposition de Burke et al. (2010). La première étape trouve un emploi du temps qui est faisable par rapport aux contraintes strictes et minimise la violation des préférences des enseignants et des préférences éducatives. Ensuite, la deuxième étape utilise l'emploi du temps obtenu à l'étape 1 comme entrée et minimise les flux d'étudiants en réaffectant les cours aux salles de classe.

Le modèle de la première étape utilise la même variable de décision \(x_{ltc}\) que le modèle monolithique. Il se compose des Eqs. (5)–(13) et sa fonction objective est la première partie de l'Eq. (27). Le modèle de la deuxième étape utilise une variable \(w_{lc}\) qui vaut 1 si le cours \(l\) est affecté à la salle \(c\) et 0 sinon. Il se compose des contraintes suivantes : premièrement, chaque cours doit être planifié dans une salle ; deuxièmement, pour chaque créneau horaire, il ne peut y avoir qu'un seul cours par salle ; et troisièmement, les contraintes (14)–(26) du modèle monolithique, où \(x_{ltc}\) est remplacé par \(w_{lc}\) si le cours \(l\) est planifié à l'heure \(t\) dans la solution de la première étape.

Il s'agit donc d'une approche hiérarchique où le premier objectif est résolu d'abord pour une optimalité globale, puis seulement le deuxième objectif est amélioré autant que possible sans changer la valeur du premier objectif. Cela reflète le fait que le premier objectif est considéré comme beaucoup plus important que le deuxième. Un avantage du modèle en deux étapes est également que la deuxième étape est garantie de trouver une solution faisable puisque la première étape assure déjà la faisabilité des affectations de salles de classe.

### 6. Résultats expérimentaux

Cette section discute des données d'entrée du modèle en deux étapes pour le Campus FEB de Bruxelles et montre les résultats du modèle en deux étapes. De plus, cette section décrit brièvement l'adaptation des données disponibles dans la littérature, ainsi que les résultats obtenus pour le modèle en deux étapes avec ces instances.

#### 6.1. Données du Campus FEB de Bruxelles de l'Université KU Leuven

Une année académique se compose de deux semestres avec 13 semaines d'enseignement par semestre. Les cours peuvent être programmés du lundi au vendredi. Chaque cours dure deux heures, ce qui permet une utilisation efficace des salles de classe. Six créneaux horaires différents peuvent être distingués : de 8h30 à 10h30, de 10h30 à 12h30, de 13h30 à 15h30, de 15h30 à 17h30, de 17h30 à 19h30 et de 19h30 à 21h30. Il y a une pause déjeuner entre le deuxième et le troisième créneau horaire.

Chaque cours a un certain nombre d'heures d'enseignement (TH) : 13, 26, 39 ou 52. Le nombre de TH détermine combien de cours doivent être programmés par semaine. Un cours de 26 TH et 52 TH est programmé respectivement une et deux fois par semaine. Un cours par deux semaines est nécessaire pour un cours de 13 TH. Un cours de 39 TH doit être programmé alternativement une ou deux fois par semaine. Les cours de 13 et 39 TH suivis par la même série peuvent être couplés entre eux. Deux cours de 13 TH peuvent utiliser le même créneau horaire chaque semaine en programmant ces cours alternativement dans ce créneau particulier. Il en va de même pour deux cours de 39 TH : deux créneaux horaires d'une semaine peuvent être utilisés pour programmer deux cours. Le cours programmé dans l'un de ces créneaux alterne chaque semaine. La disponibilité des enseignants doit être prise en compte lors du couplage des cours. Le couplage des cours permet de planifier une semaine et d'utiliser cet emploi du temps pour tout le semestre.

Le Campus FEB de Bruxelles propose des programmes académiques, des programmes préparatoires et des programmes de transition. Il existe 436 séries au total. Le tableau 1 montre le nombre de séries suivant un type d'éducation particulier. Comme on peut le déduire de ce tableau, la majorité des séries suivent une éducation en journée. Les créneaux horaires disponibles pour chaque type d'éducation sont montrés dans le tableau 2.

Les contraintes de compacité données par l'Eq. (13) doivent être construites uniquement pour les séries suivant une éducation en journée afin d'éviter une période libre entre le troisième et le cinquième créneau horaire. La raison est qu'il ne peut jamais y avoir de période libre avant la pause déjeuner, car au maximum deux cours peuvent être programmés le matin et l'éducation en journée suppose qu'aucun cours ne peut être programmé dans le dernier créneau horaire. Pour d'autres types d'éducation, il ne peut jamais y avoir de créneaux horaires libres entre eux.

Pour ces séries, 396 cours doivent être programmés. Une salle informatique est nécessaire pour 31 cours. Les autres cours peuvent être programmés dans des salles de classe normales. La FEB dispose de 56 salles de classe : 9 salles informatiques et 47 salles de classe standard. Comme le montre la figure 2, ces salles sont réparties sur 9 étages (de -1 (sous-sol) à 7) dans un seul bâtiment, appelé le bâtiment Hermes.

Tous les cours sont enseignés par 171 enseignants. Les règlements sur le temps de travail des enseignants stipulent que les enseignants ne peuvent pas enseigner plus de huit heures par jour ni plus de six heures consécutives. Cela implique que \(\lambda_1 = 4\) dans la contrainte (9) et \(\lambda_2 = 3\) dans la contrainte (10). Quatre types d'enseignants sont distingués pour déterminer les préférences des enseignants : conférenciers invités, chercheurs, enseignants à temps partiel et enseignants à temps plein. Chaque enseignant peut soumettre ses préférences d'enseignement concernant les créneaux horaires au début de l'année académique. Le coût de pénalité pour la violation des préférences des enseignants dépend du type d'enseignant. Les conférenciers invités ont la plus grande liberté concernant leurs préférences, ce qui se traduit par un coût de violation des préférences de 20. Ensuite, les chercheurs actifs ont un coût de violation des préférences de 15. Enfin, les enseignants à temps partiel et à temps plein reçoivent les poids les plus bas, respectivement 10 et 5. Un coût de 1000 est encouru pour un cours lorsque au moins une série ne peut pas assister à ce cours en raison de l'indisponibilité de la série au créneau horaire considéré. Ce sont les coûts de pénalité pour la violation des préférences éducatives. Il n'y a pas de valeur "correcte" pour la valeur de la pénalité pour la violation de chaque type de préférence ; elle doit être fixée par des considérations de gestion sur l'importance attachée à chacune d'elles. Dans le cas de l'emploi du temps de la FEB, la satisfaction des préférences éducatives est considérée comme beaucoup plus importante que la satisfaction des préférences des enseignants.

#### 6.2. Données de la littérature

Afin de tester et valider le modèle en deux étapes, nous avons adapté un ensemble de 21 instances issues de la littérature (désignées par des instances comp). Il s'agit de cas réels principalement tirés de l'Université d'Udine qui ont été utilisés pour la compétition internationale de planification des horaires en 2007-08 (ITC2007) Bonutti, Cesco, Gaspero et Schaerf (2012). Étant donné que l'objectif du problème de planification des horaires de la FEB Campus Bruxelles est nouveau dans la littérature (minimisation du flux d'étudiants entre les salles de classe), nous ne visons pas à comparer les résultats ou à valider les solutions obtenues avec celles disponibles dans l'application web pour le benchmarking.

Le tableau 3 montre les principales caractéristiques des instances comp : nombre de créneaux horaires disponibles en une journée (\(\delta\)), nombre de jours (|K|), nombre de cours (|L|), nombre de salles de classe (|C|), nombre d'enseignants (|R|), nombre de séries d'étudiants (|S|), et nombre d'étudiants suivant un type d'éducation particulier (|SD| pour l'éducation en journée, |SM| pour l'éducation en matinée, |SE| pour l'éducation en soirée et |SETT| pour l'éducation en soirée les mardis et jeudis). Les créneaux horaires disponibles pour chaque type d'éducation pour les cas avec cinq et neuf créneaux horaires en une journée (\(\delta = 5\) et \(\delta = 9\), respectivement) sont montrés dans le tableau 4 (les cas avec six créneaux horaires disponibles par jour sont décrits dans le tableau 2). Pour simplifier,

 l'éducation en soirée les mardis et jeudis est supprimée du tableau car ce type d'éducation utilise les mêmes créneaux horaires que l'éducation en soirée mais uniquement les mardis et jeudis.

Les informations non disponibles dans les instances comp ont été générées aléatoirement en fonction de la distribution des informations correspondantes dans le jeu de données du Campus FEB de Bruxelles. Pour chaque cours avec des contraintes d'indisponibilité, le type d'enseignant (conférencier invité, chercheurs, enseignants à temps partiel ou enseignants à temps plein) a été généré aléatoirement afin de fixer le coût de pénalité pour la violation des préférences des enseignants. Un type d'éducation a été attribué à chaque série de manière à ce que le nombre de créneaux horaires disponibles soit suffisant pour programmer tous les cours qui doivent être suivis par la série correspondante. Enfin, dans les instances comp, les salles sont réparties entre les bâtiments. Les cours au Campus FEB de Bruxelles ont lieu dans un seul bâtiment (comme le montre la figure 2) et la congestion des étudiants aux escaliers roulants et dans les couloirs est un problème réel. Afin de tester le modèle en deux étapes avec l'objectif de minimiser le flux d'étudiants, les salles de classe ont été attribuées de manière aléatoire aux nœuds dans le graphique de disposition. Nous utilisons deux graphiques de disposition différents pour représenter une disposition possible du bâtiment : un pour les instances avec un petit nombre de salles (les instances avec 5 et 7 salles), la figure 3A ; et un pour les instances avec un grand nombre de salles (toutes les autres instances), la figure 3B. Nous avons mis toutes les informations sur ces instances à disposition sur le site web suivant : http://feb.kuleuven.be/Jeroen.Beliën.

#### 6.3. Résultats

Le modèle monolithique et le modèle en deux étapes de la section 4 sont programmés dans Microsoft Visual Studio 2013 et utilisent la bibliothèque appelable d'ILOG CPLEX 12.3. Le code est exécuté sur un PC avec un processeur Intel Core i7-6400U de 2,10 GHz et une RAM de 8 Go. 

Le modèle de la deuxième étape nécessite de nombreuses variables et contraintes pour représenter le flux à travers les différents arcs du graphique. Pour réduire les besoins en mémoire, nous avons divisé notre modèle en un certain nombre de sous-modèles, où chaque sous-modèle résout le problème pour la matinée ou l'après-midi de chaque jour respectivement. Cela est possible car aucun flux ne se produit entre les pauses déjeuner ou entre les différents jours, de sorte que les affectations de salles de classe dans un sous-modèle n'affectent pas les flux dans un autre sous-modèle.

Pour les instances les plus difficiles, un temps de calcul important est nécessaire pour résoudre chaque sous-modèle jusqu'à l'optimalité. C'est parce que les contraintes "Big M" des Eqs. (20) et (21) fournissent des bornes faibles dans la relaxation LP du problème. Cependant, nous observons que pendant le processus de recherche, de grandes améliorations de la fonction objective sont obtenues rapidement, mais après cela, seules de très petites améliorations sont trouvées, tandis que les bornes LP restent proches de zéro. Par conséquent, nous fixons une limite de temps de 5 minutes pour le temps de calcul autorisé pour chaque sous-modèle. Pour montrer que même avec une limite de temps aussi courte, notre modèle est capable d'obtenir de bonnes solutions, nous comparons la valeur objective pour la deuxième étape de la solution obtenue après l'étape 1, qui ne prend pas en compte les flux d'étudiants, à la valeur objective améliorée après que le modèle ait été résolu. Il s'est avéré que des améliorations significatives du temps de déplacement maximal peuvent être obtenues.

Malheureusement, le nombre élevé de cours, de salles de classe et, plus important encore, de séries d'étudiants dans l'instance FEB entraîne un nombre inabordable de variables et surtout de contraintes, de sorte que CPLEX n'est pas en mesure de résoudre notre modèle de deuxième étape pour cette instance. Cependant, comme le problème de congestion est principalement situé aux escaliers, nous avons adapté le modèle pour n'inclure que les arcs représentant les escaliers dans le bâtiment et minimiser la somme des temps de déplacement sur tous ces arcs. Cela évite la grande quantité de contraintes difficiles des Eqs. (20) et (21). Ensuite, le modèle en deux étapes est capable d'obtenir une solution de bonne qualité en un temps relativement court. Le modèle de la première étape contient 24 860 contraintes et 665 280 variables. CPLEX trouve une valeur de solution de 36 170 avec un écart d'optimalité de 8,36 % avant que la recherche ne soit arrêtée en raison de problèmes de mémoire. La première étape nécessite alors 4,19 minutes de temps de calcul et la valeur finale de la fonction objective est égale à 36 170, composée de 36 000 pour les préférences éducatives et 170 pour les préférences des enseignants. Il s'agit d'une diminution significative par rapport à la procédure de planification manuelle, qui a une valeur de 535 pour les préférences des enseignants, tout en laissant de côté la programmation de 31 des 396 cours en raison de difficultés de planification pour ces cours spécifiques. Pour la deuxième étape, le plus grand sous-modèle se compose de 707 695 contraintes et 48 537 variables binaires. La valeur de la fonction objective est égale à 34 941,40, ce qui est également une amélioration significative par rapport à la valeur de 73 303,75 de la solution de la première étape, qui ne prend pas en compte les flux d'étudiants. Pour toutes les instances comp, le modèle de la deuxième étape pourrait être résolu sans aucun problème. Les résultats globaux sont montrés dans le tableau 5.

Concernant le modèle en deux étapes, la première étape peut être résolue jusqu'à l'optimalité pour toutes les instances comp, sauf pour l'instance 19, qui rencontre des problèmes de mémoire pendant la recherche et atteint un écart d'optimalité de 1,36 %. Concernant la deuxième étape, tous les sous-modèles peuvent être résolus jusqu'à l'optimalité dans le délai spécifié pour les instances 1, 5, 11, 18, qui sont les instances avec un petit nombre de salles.

### 6.4. Qualité de la solution et évolutivité du modèle en deux étapes

Enfin, nous discutons de la qualité de la solution et de l'évolutivité de notre modèle en deux étapes. Lorsque seul le premier objectif est considéré (c'est-à-dire la minimisation de la violation des préférences), ce qui signifie que \(\lambda = 1\) dans l'Eq. (27) du modèle monolithique, les pertes de décomposition sont nulles, car la première étape du modèle en deux étapes trouve la solution optimale par rapport à cet objectif. Actuellement, c'est le seul objectif considéré dans de nombreux emplois du temps universitaires. Les pertes sont maximales lorsque \(\lambda = 0\), c'est-à-dire lorsque seuls les flux d'étudiants sont pris en compte. Pour montrer l'ampleur potentielle de ces pertes, nous comparons les résultats des deux modèles sur une petite instance pour laquelle le modèle monolithique peut être résolu. Notre exemple consiste en 28 cours, suivis par 8 séries différentes d'étudiants, qui doivent être planifiés sur 4 créneaux horaires disponibles et 7 salles de classe. Pour simplifier, nous supposons que chaque cours est enseigné par un enseignant différent et ne prenons pas en compte le type d'éducation de chaque série. Nous résolvons d'abord le modèle monolithique pour trois valeurs différentes de \(\lambda\), à savoir \(\lambda = 1\), \(\lambda = 0.5\) et \(\lambda = 0\), et le modèle en deux étapes. Ensuite, nous résolvons à nouveau le modèle monolithique avec une contrainte stipulant que la valeur des préférences ne peut pas dépasser sa valeur correspondante du modèle en deux étapes, ce qui nous donne un point d'extrémité sur la frontière Pareto-optimale. Cela ne peut évidemment être testé que lorsque cette valeur objective est connue. Les résultats sont présentés dans le tableau 6. Nous voyons que \(T_{\max}\) est égal à 308,41 dans le modèle en deux étapes, ce qui est seulement à 8,60 % de la solution Pareto-optimale de 281,89 du modèle monolithique contraint, pour lequel la valeur des préférences est égale à 110 dans les deux modèles. Bien sûr, si la valeur de \(\lambda\) diminue, l'écart entre l'objectif global du modèle en deux étapes et celui du modèle monolithique non contraint s'aggrave en raison de la nature hiérarchique de notre approche, qui privilégie les préférences par rapport au temps de déplacement.

En ce qui concerne l'évolutivité, les résultats du tableau 6 montrent que le modèle monolithique non contraint nécessite environ 70 fois (pour \(\lambda = 0.5\)) jusqu'à 170 fois (pour \(\lambda = 1\)) le temps de calcul du modèle en deux étapes pour cette petite instance. Le modèle contraint nécessite seulement environ 7 à 10 fois le temps de calcul du modèle en deux étapes, car la contrainte sur la valeur du premier objectif implique une réduction considérable de l'ensemble des solutions faisables qui doivent être examinées. Nous pouvons donc conclure que notre méthode permet une réduction significative du temps de calcul requis, tout en étant capable d'obtenir des solutions de bonne qualité qui sont proches de l'un des points d'extrémité sur la frontière Pareto-optimale.

### 7. Conclusions

Cet article a présenté un modèle de programmation en nombres entiers (IP) en deux étapes pour le problème de planification des horaires universitaires (UCTP) dans le but de créer des emplois du temps compacts avec des flux d'étudiants minimisés. La première étape minimise la violation des préférences des enseignants en affectant les cours aux créneaux horaires et aux salles de classe. La deuxième étape réaffecte les salles de classe aux cours de l'emploi du temps de la première étape et minimise le flux d'étudiants. Les flux d'étudiants dans les couloirs et aux escaliers sont modélisés en utilisant un graphique dans lequel les arcs représentent les couloirs et les escaliers dans le bâtiment. Le temps de déplacement total de chaque série d'étudiants pour aller de leur première salle de classe à leur prochaine salle de classe est calculé comme la somme des temps de déplacement à travers chaque arc sur leur itinéraire, qui est lui-même une fonction du flux total d'étudiants à travers chaque arc. Pour les séries suivant une éducation en journée, les emplois du temps sont soumis à des contraintes de compacité : les périodes libres de deux heures sont évitées. L'idée est d'améliorer la compacité des emplois du temps et de réduire le temps libre entre les cours pour les étudiants. Cela est particulièrement apprécié par les étudiants qui voyagent en train ou en bus. Cependant, d'autres contraintes de compacité peuvent être générées. Un exemple est de répartir adéquatement les cours sur toute la semaine (éviter les jours avec un grand nombre de cours ou sans cours). D'autres préférences peuvent également être prises en compte en modifiant le coût de pénalité dans la fonction objective de la première étape. Cette méthode peut être appliquée à tous les types d'éducation. Un coût plus élevé peut être fixé pour, par exemple, les créneaux horaires du vendredi, de sorte que moins de cours seront programmés le vendredi.

Grâce à des tests informatiques approfondis, nous avons montré que, contrairement à un modèle IP monolithique, notre approche IP en deux étapes est capable de trouver des solutions de bonne qualité avec des flux d'étudiants minimisés pour des UCTP réels. Le modèle a été utilisé pour trouver un emploi du temps avec des flux d'étudiants sensiblement réduits par rapport à l'emploi du temps développé manuellement au Campus FEB de Bruxelles de l'Université KU Leuven. De plus, notre approche peut trouver des solutions de bonne qualité pour toutes les instances ITC2007, prouvant ainsi son applicabilité à une large gamme de dimensions de problèmes réels.

Une direction possible pour de futures recherches est la dérivation de bornes plus strictes pour le modèle de la deuxième étape afin de réduire le temps de calcul nécessaire pour résoudre le modèle jusqu'à l'optimalité.
